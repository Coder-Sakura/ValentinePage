<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PixiC部署文档</title>
      <link href="/blog/2020/06/24/pixic-bu-shu/"/>
      <url>/blog/2020/06/24/pixic-bu-shu/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：这是一篇关于<code>PixiC</code>项目的部署文档，旨在帮助感兴趣的各位部署<code>PixiC</code>项目，获取<code>Pixiv</code>的插画和数据。</p><p> 如果你有一定的基础，那么可以跳过部分节点，文档尽可能从0到1，详细的讲述部署过程。</p></blockquote><a id="more"></a><img src="/blog/2020/06/24/pixic-bu-shu/HeadPicture.jpg"><hr><h2 id="PixiC部署文档"><a href="#PixiC部署文档" class="headerlink" title="PixiC部署文档"></a>PixiC部署文档</h2><p>Github仓库地址：<a href="https://github.com/Coder-Sakura/PixiC" target="_blank" rel="noopener">PixiC</a></p><p>(此文留存备份)</p><h3 id="1、Python-amp-MySQL"><a href="#1、Python-amp-MySQL" class="headerlink" title="1、Python&amp;MySQL"></a>1、Python&amp;MySQL</h3><hr><h4 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h4><p>目前只有<code>win</code>系统的部署文档，用户大多数是<code>win</code>用户，所以目前<code>PixiC</code>未兼容<code>win</code>以外的系统。</p><ul><li>Python 3.7.6</li><li>MySQL 5.7.14</li></ul><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h4><hr><p><code>Python</code>版本尽可能和项目一致,当然高版本也是可以的.</p><ul><li><p>Python官方下载页面: <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a> </p></li><li><p>蓝奏云: <a href="https://python.lanzous.com/iczrxeb" target="_blank" rel="noopener">python-3.7.6-amd64.exe</a></p></li></ul><p><strong>如果你不需要用到数据库,下面MySQL这步可以跳过.</strong></p><ul><li><p>如何判断你需不需要用到数据库呢? </p></li><li><p>如果是只需要下载插画到本地或你根本不知道数据库是什么, 那么下面这一部分可以略过.</p></li></ul><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><strong>MySQL</strong></h4><hr><p>MySQL可以使用WampServer，phpStudy，phpEnv等集成环境轻松安装, 也可以只安装MySQL数据库. MySQL版本尽量用最新或者稳定的,项目测试尚未更新MySQL版本.（建议采用最新版本）</p><ul><li>MySQL官方下载: <a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">https://www.mysql.com/downloads/</a></li><li>WampServer官网下载: <a href="https://www.wampserver.com/" target="_blank" rel="noopener">https://www.wampserver.com/</a></li><li>度盘: <a href="https://pan.baidu.com/s/1hRKTna7KaOBLwzRVxhvdDg" target="_blank" rel="noopener">WampServer3.0.6</a>  提取码: 3ug2</li></ul><p>安装完数据库, 可以使用mysql-cmd来管理, 也可以使用数据库可视化/管理工具进行管理. （建议采用最新版本）</p><ul><li>个人使用的是MySQL-front</li><li>MySQL-front官方下载: <a href="https://mysql-front.en.softonic.com" target="_blank" rel="noopener">https://mysql-front.en.softonic.com</a></li><li>蓝奏云: <a href="https://python.lanzous.com/iczskej" target="_blank" rel="noopener">MySQL-Front_Setup_6.1.1.26.exe</a></li></ul><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><hr><p>安装Python时记得勾选Add Python to Path以及注意安装路径.</p><p><img src="https://i.loli.net/2020/06/12/4lYzvqFcfASXbQd.png" alt="PixiC-1.png"></p><p><strong>第一个红框框选的位置为Python的安装目录</strong>（重点）, 第二个为添加Python到环境变量.</p><p>安装完成后, Win + R, 输入cmd, 输入Python. 如图,则安装成功.</p><p><img src="https://i.loli.net/2020/06/12/HKuqdAjpwLgRZ9W.png" alt="PixiC-2.png"></p><p>初次安装完python, 建议更新pip版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>使用pip –version查看pip版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure><hr><p>MySQL及MySQL管理工具安装完成如下:</p><p><img src="https://i.loli.net/2020/06/12/K4hc6mkF7oTDxMv.png" alt="PixiC-3.png"></p><p><img src="https://i.loli.net/2020/06/12/r6MIpO2Y4i8acT1.png" alt="PixiC-4.png"></p><h3 id="2、Python依赖"><a href="#2、Python依赖" class="headerlink" title="2、Python依赖"></a>2、Python依赖</h3><hr><p>安装PixiC需要的第三方库依赖</p><p>下载本项目到本地.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Coder-Sakura/PixiC.git</span><br></pre></td></tr></table></figure><p>或者通过Download ZIP下载</p><p><img src="https://i.loli.net/2020/06/12/3czShaArCi79oRW.png" alt="PixiC-5.png"></p><p>下载或解压到本地后，切换到v2.0目录,，打开cmd（在地址栏输入cmd）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>如果pip更新下载过慢或失败，尝试使用国内豆瓣源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><p>安装依赖时，出现 You should consider upgrading via the ‘python -m pip install –upgrade pip’ command. 字样时，说明你的pip需要更新，使用提示给出的更新命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>安装依赖完毕后，使用pip list检查是否安装成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><h3 id="3、Chrome-amp-Webdriver"><a href="#3、Chrome-amp-Webdriver" class="headerlink" title="3、Chrome&amp;Webdriver"></a>3、Chrome&amp;Webdriver</h3><hr><p>通过Selenium驱动ChromeDriver，获取Chrome上Pixiv账户的Cookie，从而达到绕过Pixiv Google v3验证的目的。</p><p>简而言之，没有这一步的部署，根本获取不了你的Pixiv账号的信息，也就是没有登录（Pixiv对游客账号是有限制的），那么PixiC就无从谈起了。</p><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a><strong>Chrome</strong></h4><hr><p>Chrome官方下载: <a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></p><p>蓝奏云: <a href="https://python.lanzous.com/iRniodle0dg" target="_blank" rel="noopener">ChromeSetup.exe</a></p><p><strong>使用Chrome://version, 查看Chrome浏览器版本及个人资料路径（重点）</strong></p><p><img src="https://i.loli.net/2020/06/12/Ne5fyhrPIxJFWLV.png" alt="PixiC-6.png"></p><h4 id="ChromeDriver"><a href="#ChromeDriver" class="headerlink" title="ChromeDriver"></a><strong>ChromeDriver</strong></h4><hr><p>ChromeDriver仓库地址：<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a></p><p><strong>根据Chrome版本号，下载对应的ChromeDriver。</strong></p><p>上面是83.0.4103.61，那么这里选择对应的进行下载。</p><p><img src="https://i.loli.net/2020/06/12/4FVgPo2KMsCHLhY.png" alt="PixiC-7.png"></p><p><img src="https://i.loli.net/2020/06/12/N6JELuXdaonsMey.png" alt="PixiC-8.png"></p><p>测试环境在win，这里选择chromedriver_win32.zip下载。</p><p><strong>注意! chromedriver版本要与Chrome浏览器版本对应，如果PixiC中的Selenium驱动不了chromedriver，请检查前面二者的版本号。</strong></p><p>解压完毕，将chromedriver.exe放在python.exe所在目录下（推荐）</p><p>（Python的安装目录不一样,截图仅供参考）</p><p><img src="https://i.loli.net/2020/06/12/fJpADMvc1ZrEhP3.png" alt="PixiC-10.png"></p><p>python.exe所在路径，在第一点的Tips中有描述。</p><p>或者可以通过以下方法找到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/12/ZLraGynJ42DKjtv.png" alt="PixiC-9.png"></p><p>sys.path中也有给出上面截图的路径。</p><h4 id="测试Chromedriver是否正常工作"><a href="#测试Chromedriver是否正常工作" class="headerlink" title="测试Chromedriver是否正常工作"></a><strong>测试Chromedriver是否正常工作</strong></h4><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"https://www.pixiv.net"</span>)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p>复制到cmd窗口中执行或新建一个py脚本运行</p><p>测试结果: Chrome打开并访问Pixiv，之后关闭Chrome</p><h3 id="4、配置文件"><a href="#4、配置文件" class="headerlink" title="4、配置文件"></a>4、配置文件</h3><hr><p>打开PixiC项目v2.0/config.py文件</p><p>使用sublime text(推荐)/notepad++/pycharm/vscode等等代码编辑器打开。</p><p>蓝奏云: <a href="https://python.lanzous.com/iFl1Ddv2rfi" target="_blank" rel="noopener">Sublime Text3 v3.2.1中文免安装版</a></p><h4 id="定制配置文件"><a href="#定制配置文件" class="headerlink" title="定制配置文件"></a><strong>定制配置文件</strong></h4><hr><p>在PixiC配置之前，先要明确自己利用PixiC的目的是下列哪一种？</p><ol><li>下载Pixiv账号关注/收藏作品原图</li><li>包含1，存储数据到数据库/使用API对接酷q机器人等拓展应用</li></ol><p>第一点的话，阅读简单配置即可。</p><p>第二点的话，请阅读简单配置及拓展，以及MySQL环境需要安装。</p><h4 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a><strong>简单配置</strong></h4><hr><p><strong>目录路径</strong></p><table><thead><tr><th>字段</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>ROOT_PATH</code></td><td><code>Pixiv</code>账号关注画师的作品下载目录</td><td>必填，<code>ROOT_PATH</code>= r’H:\follow’</td></tr><tr><td><code>BOOKMARK_PATH</code></td><td><code>Pixiv</code>账号收藏作品下载目录</td><td>必填，<code>BOOKMARK_PATH</code>= r’H:\bookmark’</td></tr><tr><td><code>PRO_DIR</code></td><td><code>Chrome</code>浏览器用户数据目录</td><td>必填，参照<code>第三节Chrome&amp;Webdriver</code>进行填写</td></tr></tbody></table><p>如果关注和收藏过多，<code>ROOT_PATH</code>和<code>BOOKMARK_PATH</code>建议选择容量剩余较大的硬盘的目录。<br>这里给出下载容量参考：</p><ul><li>355关注用户，3000收藏数限制，120G；5000收藏作品，全下载14G</li><li>2400关注用户，2000收藏数限制，747G</li></ul><p>关于<code>PRO_DIR</code>字段，配置文件中注释有提供参考</p><p><strong>用户信息</strong></p><table><thead><tr><th>字段</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>USER_ID</code></td><td><code>Chrome</code>浏览器登录的<code>Pixiv</code>账号的<code>uid</code></td><td>默认为空</td></tr><tr><td><code>COOKIE_UPDATE_ENABLED</code></td><td>控制是否更新本地<code>cookie</code></td><td>首次运行设置为True</td></tr></tbody></table><ul><li>pixiv账号的uid可以访问 <a href="https://www.pixiv.net/bookmark.php" target="_blank" rel="noopener">https://www.pixiv.net/bookmark.php</a> 。点击自己头像进入主页，查看地址栏，形如：<a href="https://www.pixiv.net/users/112233" target="_blank" rel="noopener">https://www.pixiv.net/users/112233</a>  ，112233即为uid。</li></ul><ul><li><code>COOKIE_UPDATE_ENABLED</code>项首次运行设置为True以更新cookie到本地，后续运行设置为False可快速启动。</li></ul><p><strong>模块控制开关及轮询周期</strong></p><table><thead><tr><th>字段</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>PIXIV_CRAWLER_ENABLED</code></td><td>关注用户作品爬虫模块开关</td><td>默认True，False即关闭</td></tr><tr><td><code>PIXIV_BOOKMARK_ENABLED</code></td><td>收藏作品爬虫模块开关</td><td>默认True，False即关闭</td></tr><tr><td><code>PIXIV_API_ENABLED</code></td><td>API模块开关</td><td>默认False</td></tr><tr><td><code>USERS_CYCLE</code></td><td>关注爬虫轮询间隔</td><td>默认43200秒</td></tr><tr><td><code>USERS_LIMIT</code></td><td>关注爬虫下载作品的收藏最低限制</td><td>默认3000收藏以上</td></tr><tr><td><code>BOOKMARK_CYCLE</code></td><td>收藏爬虫轮询间隔</td><td>默认7200秒</td></tr><tr><td><code>BOOKMARK_LIMIT</code></td><td>收藏爬虫下载作品的收藏最低限制</td><td>默认0收藏，全下载</td></tr></tbody></table><p><code>PIXIV_CRAWLER_ENABLED</code>和<code>PIXIV_BOOKMARK_ENABLED</code>默认开启，<code>PIXIV_API_ENABLED</code>如果需要开启，参考拓展配置。</p><h4 id="拓展配置"><a href="#拓展配置" class="headerlink" title="拓展配置"></a>拓展配置</h4><hr><p><strong>API设置</strong></p><table><thead><tr><th>字段</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>API_HOST</code></td><td>主机ip</td><td>默认本地，0.0.0.0/127.0.0.1</td></tr><tr><td><code>API_PORT</code></td><td>端口</td><td>默认1526</td></tr><tr><td><code>API_THREAD</code></td><td>API线程数</td><td>默认8</td></tr><tr><td><code>RANDOM_LIMIT</code></td><td>API-random接口-最大返回数</td><td>默认10</td></tr><tr><td><code>RANDOM_BOOKMARK_ENABLE</code></td><td>API-random接口-是否开启收藏数筛选</td><td>默认True</td></tr><tr><td><code>RANDOM_BOOKMARK_LIMIT</code></td><td>API-random接口-返回插画最小收藏数</td><td>默认3000收藏数以上</td></tr></tbody></table><p><strong>数据库连接信息</strong></p><table><thead><tr><th>字段</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>DB_ENABLE</code></td><td>数据库开关</td><td>默认为False，True为开启</td></tr><tr><td><code>DB_HOST</code></td><td>主机ip</td><td>默认本地，localhost/127.0.0.1</td></tr><tr><td><code>DB_PORT</code></td><td>端口</td><td>3306</td></tr><tr><td><code>DB_USER</code></td><td>用户名</td><td></td></tr><tr><td><code>DB_PASSWD</code></td><td>密码</td><td></td></tr><tr><td><code>DB_DATABASE</code></td><td>数据库库名</td><td>moe</td></tr><tr><td><code>DB_CHARSET</code></td><td>数据库/表编码</td><td>utf8mb4</td></tr></tbody></table><p>数据库连接信息根据实际填写，<code>DB_ENABLE</code>看个人需求。</p><p>不过注意：</p><ul><li><code>DB_ENABLE</code>和<code>PIXIV_API_ENABLED</code>同时开启，都为True，可同时使用数据库及API</li><li><code>DB_ENABLE</code>为True，<code>PIXIV_API_ENABLED</code>为False，爬虫模块使用数据库进行存储</li><li><code>DB_ENABLE</code>和<code>PIXIV_API_ENABLED</code>都为False，无法使用数据库及API</li><li><code>DB_ENABLE</code>为False，<code>PIXIV_API_ENABLED</code>为True，结果与上一点相同</li></ul><p><code>DB_DATABASE</code>和<code>DB_CHARSET</code>和<code>v2.0/doc/create.sql</code>一致，建议不修改</p><p>以上便是配置文件部分</p><h3 id="5、运行"><a href="#5、运行" class="headerlink" title="5、运行"></a>5、运行</h3><hr><p>首次运行，配置好配置文件，在Chrome上登录Pixiv账号，关闭Chrome。</p><p>打开<code>cmd</code>，切换到v2.0目录下 / 或进入v2.0目录后再从地址栏打开<code>cmd</code></p><p>输入命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python scheduler.py</span><br></pre></td></tr></table></figure><p>接下来享受自己关注画师的作品和收藏的作品下载到本地，或者数据存储进数据库里吧！</p>]]></content>
      
      
      <categories>
          
          <category> python爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pixiv </tag>
            
            <tag> PixiC </tag>
            
            <tag> acg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBookShelf-python</title>
      <link href="/blog/2019/11/12/mybookshelf-python/"/>
      <url>/blog/2019/11/12/mybookshelf-python/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：用python自定义阅读酷1000+书源并导出生成短链接</p></blockquote><a id="more"></a><hr><h2 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收藏</span></span><br><span class="line">post_url = <span class="string">'http://ku.iszoc.com/index/sign.html'</span></span><br><span class="line"><span class="comment"># 导出收藏为json文件的api</span></span><br><span class="line">export_url = <span class="string">'http://ku.iszoc.com/user/Favorites/export.html'</span></span><br><span class="line"><span class="comment"># 阅读酷书源最大页数</span></span><br><span class="line">search_url = <span class="string">"http://ku.iszoc.com/index/search.html"</span></span><br><span class="line"><span class="comment"># 阅读酷书源收藏书源最大页数</span></span><br><span class="line">fa_index_url = <span class="string">"http://ku.iszoc.com/user/favorites/index.html"</span></span><br><span class="line"><span class="comment"># 删除收藏的api</span></span><br><span class="line">del_url = <span class="string">"http://ku.iszoc.com/user/Favorites/selectDel.html"</span></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"Cookie"</span>:<span class="string">"PHPSESSID=c3a21362dc3036a515db860e095a1ca4; Hm_lvt_ea5e026ac2ed0205ce7a6417bbd1dcef=1571831331,1572157850,1572790358,1573480142; Hm_lpvt_ea5e026ac2ed0205ce7a6417bbd1dcef=1573481354"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3641.400 QQBrowser/10.4.3284.400"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取最大书源页数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = req_page_html(url=url)</span><br><span class="line">obj = etree.HTML(html)</span><br><span class="line">num = obj.xpath(<span class="string">".//ul[@class='pagination']//li/a/text()"</span>)[<span class="number">-3</span>]</span><br><span class="line"><span class="keyword">return</span> int(num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_page_html</span><span class="params">(url,num=<span class="number">3</span>)</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">封装函数以请求每一页书源网址(一页15个),返回resp.text</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">resp = requests.post(url,headers=headers,timeout=<span class="number">10</span>).text</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:<span class="comment"># 重试3次</span></span><br><span class="line"><span class="keyword">return</span> req_page_html(url,num=num<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(url)</span><br><span class="line">print(e)</span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req</span><span class="params">(post_id,num=<span class="number">3</span>)</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">封装请求函数以收藏书源</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">"type"</span>:<span class="string">"yes"</span>,</span><br><span class="line"><span class="string">"id"</span>:post_id</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">resp = requests.post(post_url,headers=headers,data=data,timeout=<span class="number">10</span>).text</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">0</span>:<span class="comment"># 重试3次</span></span><br><span class="line"><span class="keyword">return</span> req(post_id,num=num<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(post_id)</span><br><span class="line">print(e)</span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_div</span><span class="params">(i,div)</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">提取信息,主要是拿到收藏状态,其他写着玩,如需不要请注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">r = re.compile(<span class="string">"[ &amp;nbsp\r\n ]"</span>)<span class="comment"># 过滤的正则表达式</span></span><br><span class="line"><span class="comment"># 每个书源div下的5个span,有些有6个</span></span><br><span class="line">span_list = div.xpath(<span class="string">"./div[@class='layui-card-body']/span"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================ ↓ 可注释 ↓ ==================================</span></span><br><span class="line"><span class="comment"># 点击量</span></span><br><span class="line">dianji_count = span_list[<span class="number">0</span>].xpath(<span class="string">"./span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">dianji_count = re.sub(r,<span class="string">''</span>,dianji_count).replace(<span class="string">" "</span>,<span class="string">""</span>)</span><br><span class="line"><span class="comment"># 评论量</span></span><br><span class="line">comment_count = span_list[<span class="number">1</span>].xpath(<span class="string">"./span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">comment_count = re.sub(r,<span class="string">''</span>,comment_count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新时间</span></span><br><span class="line">update_time = span_list[<span class="number">3</span>].xpath(<span class="string">"./span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">update_time = re.sub(r,<span class="string">''</span>,update_time)</span><br><span class="line">update_time = update_time[:<span class="number">10</span>] + <span class="string">' '</span> +update_time[<span class="number">10</span>:]</span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line">author = span_list[<span class="number">4</span>].xpath(<span class="string">"./span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">author = re.sub(r,<span class="string">""</span>,author)</span><br><span class="line"><span class="comment"># 以下属性可能部分div没有</span></span><br><span class="line"><span class="comment"># 带发现</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">search = span_list[<span class="number">5</span>].xpath(<span class="string">"./span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">search = <span class="string">"无带发现"</span></span><br><span class="line">search = re.sub(r,<span class="string">""</span>,search)</span><br><span class="line"><span class="comment"># 音频源</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">audio = span_list[<span class="number">5</span>].xpath(<span class="string">"./span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">audio = <span class="string">"无音频源"</span></span><br><span class="line">audio = re.sub(r,<span class="string">""</span>,audio)</span><br><span class="line"><span class="comment"># ================ ↑ 可注释 ↑ ==================================</span></span><br><span class="line"><span class="comment"># 收藏状态</span></span><br><span class="line">bookmark = span_list[<span class="number">2</span>].xpath(<span class="string">"./span/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">bookmark = re.sub(r,<span class="string">""</span>,bookmark)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如注释收藏状态以外的部分,请使用下面该行</span></span><br><span class="line"><span class="comment"># return bookmark</span></span><br><span class="line"><span class="keyword">return</span> [dianji_count,comment_count,bookmark,update_time,author,search,audio],bookmark</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,max(search_url)+<span class="number">1</span>):</span><br><span class="line">url = <span class="string">'http://ku.iszoc.com/index/search.html?page=&#123;&#125;'</span>.format(i)</span><br><span class="line">resp = req_page_html(url)</span><br><span class="line">etree_obj = etree.HTML(resp)</span><br><span class="line">div_list = etree_obj.xpath(<span class="string">"//div[@class='layui-card-body']/div"</span>)[<span class="number">1</span>:]<span class="comment"># 第一个是公告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line"><span class="comment"># 每个书源的id</span></span><br><span class="line">post_id = div.xpath(<span class="string">"./a/@href"</span>)[<span class="number">0</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>].split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">mes_list,bookmark = parse_div(i,div)</span><br><span class="line"><span class="comment"># print(post_id,bookmark)</span></span><br><span class="line"><span class="keyword">if</span> bookmark == <span class="string">'未收藏'</span>:</span><br><span class="line">resp = req(post_id)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'收藏成功'</span> <span class="keyword">in</span> resp:</span><br><span class="line">print(i,post_id,<span class="string">'收藏成功'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(resp)</span><br><span class="line">print(i,post_id,<span class="string">'error'</span>)</span><br><span class="line"><span class="keyword">elif</span> bookmark == <span class="string">'已收藏'</span>:</span><br><span class="line">print(i,post_id,<span class="string">'已收藏'</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># print('\n')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">获取收藏内的书源的value_id,并将所有id拼接起来</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">value_id = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,max(fa_index_url)+<span class="number">1</span>):</span><br><span class="line">fa_url = <span class="string">'http://ku.iszoc.com/user/favorites/index.html?page=&#123;&#125;'</span>.format(i)</span><br><span class="line">resp = req_page_html(fa_url)</span><br><span class="line">etree_obj = etree.HTML(resp)</span><br><span class="line">id_list = etree_obj.xpath(<span class="string">"//input[@name='key[]']/@value"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _id <span class="keyword">in</span> id_list:</span><br><span class="line">value_id += _id</span><br><span class="line">value_id += <span class="string">','</span></span><br><span class="line"><span class="comment"># print(value_id)</span></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1008_values_id_list.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(value_id)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'id'</span>:value_id</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 批量删除所有收藏书源</span></span><br><span class="line"><span class="comment"># resp = requests.post(del_url,headers=headers,data=data,timeout=10).text</span></span><br><span class="line"><span class="comment"># 批量导出所有收藏书源</span></span><br><span class="line">resp = requests.post(export_url,headers=headers,data=data,timeout=<span class="number">10</span>).text</span><br><span class="line">print(resp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1、使用前清获取自己的cookie填入headers中的cookies字段中</span></span><br><span class="line"><span class="string">2、如需删除所有收藏的书源,将下面三行注释</span></span><br><span class="line"><span class="string">再将export()方法中post的url由export_url改为del_url即可</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">"="</span>*<span class="number">30</span>,<span class="string">"开始收藏"</span>,<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">work()<span class="comment"># 全部收藏</span></span><br><span class="line">print(<span class="string">"="</span>*<span class="number">30</span>,<span class="string">"收藏完成"</span>,<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"="</span>*<span class="number">30</span>,<span class="string">"开始获取书源地址"</span>,<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">export()<span class="comment"># 拿到所以value id生成json</span></span><br><span class="line">print(<span class="string">"="</span>*<span class="number">30</span>,<span class="string">"获取完成"</span>,<span class="string">"="</span>*<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2><h2 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> MyBookShelf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBookShelf/阅读</title>
      <link href="/blog/2019/10/27/mybookshelf/"/>
      <url>/blog/2019/10/27/mybookshelf/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：分享一款可以读书软件(阅读/MyBookShelf)。无广告，可自定义书源，界面简洁，专注阅读，没有多余的社交等功能，专为管理书籍而生。</p></blockquote><a id="more"></a><img src="/blog/2019/10/27/mybookshelf/HeadPicture.png"><hr><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p><code>MyBookShelf</code> / <code>阅读</code> 专注于管理书籍，并能用网络中自定义来源以获取书籍内容，开源简洁，支持Web服务管理书架。大小10M左右，麻雀虽小五脏俱全。</p><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><ul><li>Github地址：<a href="https://github.com/gedoor/MyBookshelf" target="_blank" rel="noopener">https://github.com/gedoor/MyBookshelf</a></li><li>官网：<a href="https://gedoor.github.io/MyBookshelf/" target="_blank" rel="noopener">https://gedoor.github.io/MyBookshelf/</a></li><li>书源分享平台：<a href="http://ku.iszoc.com/" target="_blank" rel="noopener">http://ku.iszoc.com/</a></li></ul><h4 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h4><p>界面简洁，专注阅读。书源丰富，功能齐全，自定义书源，自定义排版( 图片来源官网/github) </p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1"><i class="fa fa-heart" "=""></i>first tab</a></li><li class="tab"><a href="#-2">second tab</a></li><li class="tab"><a href="#-3">third tab</a></li><li class="tab"><a href="#-4">fourth tab</a></li><li class="tab"><a href="#-5">fifth tab</a></li><li class="tab"><a href="#-6">sixth tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><p><img src="/blog/2019/10/27/mybookshelf/3.jpg"></p></div><div class="tab-pane" id="-2"><p><img src="/blog/2019/10/27/mybookshelf/4.jpg"></p></div><div class="tab-pane" id="-3"><p><img src="/blog/2019/10/27/mybookshelf/5.jpg"></p></div><div class="tab-pane" id="-4"><p><img src="/blog/2019/10/27/mybookshelf/6.jpg"></p></div><div class="tab-pane" id="-5"><p><img src="/blog/2019/10/27/mybookshelf/7.jpg"></p></div><div class="tab-pane" id="-6"><p><img src="/blog/2019/10/27/mybookshelf/8.jpg"></p></div></div></div><h2 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h2><ul><li>APK下载( 目前最新YueDu_2.19.102310 )：<a href="https://github.com/gedoor/MyBookshelf/releases" target="_blank" rel="noopener">https://github.com/gedoor/MyBookshelf/releases</a></li><li>酷安下载：<a href="https://www.coolapk.com/apk/com.smartjinyu.mybookshelf?from=rss&amp;version=1.3" target="_blank" rel="noopener">https://www.coolapk.com/apk/com.smartjinyu.mybookshelf?from=rss&amp;version=1.3</a></li></ul><h2 id="3、导入书源"><a href="#3、导入书源" class="headerlink" title="3、导入书源"></a>3、导入书源</h2><p>可以在书源分享平台选择自己喜欢的书源，在线制作并导出书源文件地址，再在app中添加即可。</p><hr><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">点击书源管理</a></li><li class="tab"><a href="#1-2">选择书源导入方式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><p><img src="/blog/2019/10/27/mybookshelf/2.jpg"></p></div><div class="tab-pane" id="1-2"><p><img src="/blog/2019/10/27/mybookshelf/1.jpg"></p></div></div></div><p>下一篇将用python获取整个书源分享平台的书源，导出并生成短链接，以便直接导入1000+书源</p>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件分享 </tag>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1024小关卡</title>
      <link href="/blog/2019/10/24/1024/"/>
      <url>/blog/2019/10/24/1024/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：菜鸟教程公众号在1024当天所发的一个 ” 程序员节闯关瓜分 1024 红包 “ 的活动。</p></blockquote><a id="more"></a><img src="/blog/2019/10/24/1024/HeadPicture.png"><hr><h2 id="1、文章页面展示"><a href="#1、文章页面展示" class="headerlink" title="1、文章页面展示"></a>1、文章页面展示</h2><div><div class="fold_hider"><div class="close hider_title">点击</div></div><div class="fold"><p><img src="/blog/2019/10/24/1024/1.png"></p></div></div><hr><h2 id="2、逐个击破"><a href="#2、逐个击破" class="headerlink" title="2、逐个击破"></a>2、逐个击破</h2><h3 id="1、打开网站-www-runoob-com-查找第一个字母-——-i"><a href="#1、打开网站-www-runoob-com-查找第一个字母-——-i" class="headerlink" title="1、打开网站 www.runoob.com 查找第一个字母 —— i"></a>1、打开网站 <a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a> 查找第一个字母 —— i</h3><img src="/blog/2019/10/24/1024/2.png"><blockquote><ul><li>ctrl + U 打开源码没发现什么，也没什么明确提示</li><li>F12 打开调试工具，很明显看见个关键字 / console 页签也有打印</li></ul></blockquote><h3 id="2、第二个字母-md5-加密-——-l"><a href="#2、第二个字母-md5-加密-——-l" class="headerlink" title="2、第二个字母 md5 加密 —— l"></a>2、第二个字母 md5 加密 —— l</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">    res = hashlib.md5(i.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'2db95e8e1a9267b7a1188556b2013b33'</span>:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><h3 id="3、第三个字母对应的ASCII为111-——-o"><a href="#3、第三个字母对应的ASCII为111-——-o" class="headerlink" title="3、第三个字母对应的ASCII为111 —— o"></a>3、第三个字母对应的ASCII为111 —— o</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chr() 查看ascii码对应的字符  </span></span><br><span class="line"><span class="comment"># chr(65)  A</span></span><br><span class="line">chr(<span class="number">111</span>)</span><br></pre></td></tr></table></figure><h3 id="4、第四个字母在二维码中-——-v"><a href="#4、第四个字母在二维码中-——-v" class="headerlink" title="4、第四个字母在二维码中 —— v"></a>4、第四个字母在二维码中 —— v</h3><blockquote><p>扫描即可，v</p><p>盲猜，ilov erunoob，都是套路</p></blockquote><h3 id="5、第五个字母-——-e"><a href="#5、第五个字母-——-e" class="headerlink" title="5、第五个字母 —— e"></a>5、第五个字母 —— e</h3><blockquote><p><strong>RGB(238,238,238)</strong></p></blockquote><p>RGB颜色代码转十六进制 ——&gt; 结果：#EEEEEE</p><p>网站: <a href="https://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">RGB颜色值与十六进制颜色码转换工具</a></p><h3 id="6、第6-8个字母是个单词，图片的数字为二进制-——-r-u-n"><a href="#6、第6-8个字母是个单词，图片的数字为二进制-——-r-u-n" class="headerlink" title="6、第6-8个字母是个单词，图片的数字为二进制 —— r u n"></a>6、第6-8个字母是个单词，图片的数字为二进制 —— r u n</h3><blockquote><p>01110010</p><p>01110101</p><p>01101110</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'01110010'</span>,<span class="number">2</span>)</span><br><span class="line">int(<span class="string">'01110101'</span>,<span class="number">2</span>)</span><br><span class="line">int(<span class="string">'01101110'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 114 117 110</span></span><br><span class="line"><span class="comment"># ascii码</span></span><br><span class="line"><span class="comment"># 用chr()转换下</span></span><br><span class="line"></span><br><span class="line">chr(<span class="number">114</span>)</span><br><span class="line">chr(<span class="number">117</span>)</span><br><span class="line">chr(<span class="number">110</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r u n</span></span><br></pre></td></tr></table></figure><h3 id="7、第七个——-oo"><a href="#7、第七个——-oo" class="headerlink" title="7、第七个—— oo"></a>7、第七个—— oo</h3><p>图片里的是一段js代码，还有正则。</p><p>reg 的意思是：</p><blockquote><p> (\w)，匹配字母及下划线并分到一个捕获组里；</p><p>\1，是向后引用第二个捕获组并匹配和分到一个捕获组。( \0是第一个，也就是正则表达式 )</p><p>这段正则就是捕获字母或下划线重复的部分</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">h = <span class="string">'abcdefghijklmnoopqrstuvwxyz'</span></span><br><span class="line">r = <span class="string">r'(\w)(\1)'</span></span><br><span class="line"><span class="comment"># js代码里的正则/g不知道啥意思</span></span><br><span class="line">p = re.compile(r)</span><br><span class="line">m = re.findall(p,h)</span><br></pre></td></tr></table></figure><p>结果，m = [(‘o’, ‘o’)]</p><h3 id="8、第八个字母-——-b"><a href="#8、第八个字母-——-b" class="headerlink" title="8、第八个字母 —— b"></a>8、第八个字母 —— b</h3><blockquote><p>Yg==</p><p>等于号结尾，很明显是base家族编码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(<span class="string">b'Yg=='</span>))</span><br><span class="line"><span class="comment"># base32解码就是将b64decode变成b32decode,base16同理.</span></span><br></pre></td></tr></table></figure><h3 id="3、请求"><a href="#3、请求" class="headerlink" title="3、请求"></a>3、请求</h3><blockquote><p>以上得到是：iloverunoob；</p><p>拼接 <a href="http://test.runoob.com/runoob1024.php?key=iloverunoob" target="_blank" rel="noopener">http://test.runoob.com/runoob1024.php?key=iloverunoob</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python操作csv文件</title>
      <link href="/blog/2019/09/26/csv/"/>
      <url>/blog/2019/09/26/csv/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：csv文档操作及部分函数示例</p></blockquote><a id="more"></a><hr><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><ol><li>CSV 模块是python内置的标准库</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv <span class="comment"># 引入方式</span></span><br></pre></td></tr></table></figure><ol start="2"><li>CSV格式的文件是电子表格和数据库最常见的输入输出文件格式，对了多种来源的CSV文件，编写一个统一的CSV模块来统一处理是极为有效率的。</li></ol><h3 id="2、函数介绍"><a href="#2、函数介绍" class="headerlink" title="2、函数介绍"></a>2、函数介绍</h3><h4 id="1-csv-reader"><a href="#1-csv-reader" class="headerlink" title="1.csv.reader()"></a>1.csv.reader()</h4><ul><li><p>读取</p></li><li><p>csvfile : 必须是可迭代对象，或者是文件</p></li><li><p>dialect：编码风格，默认是 excel 风格；需要指定其他风格可查看csv.list_dialects()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(csv.list_dialects())</span><br><span class="line"><span class="comment"># ['excel', 'excel-tab', 'unix']</span></span><br></pre></td></tr></table></figure></li><li><p>fmtparams：格式化参数，用于覆盖 dialect 指定的风格</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ls = csv.reader(f,dialect=<span class="string">'excel'</span>)<span class="comment"># 默认是excel</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> ls:print(l)</span><br><span class="line"><span class="comment"># ['标题1', '标题2', '标题3', '标题4']</span></span><br><span class="line"><span class="comment"># ['1', '2', '3', '4']</span></span><br><span class="line"><span class="comment"># ['1', '1']</span></span><br></pre></td></tr></table></figure><h4 id="2-csv-writer"><a href="#2-csv-writer" class="headerlink" title="2.csv.writer()"></a>2.csv.writer()</h4><ul><li>写入</li><li>同csv.reader()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># w是写入,存在则覆盖,慎用</span></span><br><span class="line"><span class="comment"># 这里为了举例使用</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    w = csv.writer(f)</span><br><span class="line">    w.writerow([<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    w.writerows([[<span class="string">'John'</span>,<span class="number">18</span>],[<span class="string">'Joe'</span>,<span class="number">19</span>]])</span><br></pre></td></tr></table></figure><ul><li>writerow 单行写入</li><li>writerows 多行写入</li></ul><p>但是以上代码执行后存在一个问题：每次写入数据都会换行再写入</p><img src="/blog/2019/09/26/csv/1.png"><p>解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># w是写入,存在则覆盖,慎用</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    w = csv.writer(f)</span><br><span class="line">    w.writerow([<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    w.writerows([[<span class="string">'John'</span>,<span class="number">18</span>],[<span class="string">'Joe'</span>,<span class="number">19</span>]])</span><br></pre></td></tr></table></figure><p>结果：</p><img src="/blog/2019/09/26/csv/2.png"><p>分析：</p><ul><li>newline 参数是控制文本模式下( 即w、w+、a、a+等) 一行文本结束的字符，可以是None，\n，\t等</li></ul><h4 id="3-csv-list-dialects"><a href="#3-csv-list-dialects" class="headerlink" title="3.csv.list_dialects()"></a>3.csv.list_dialects()</h4><ul><li>查看所有支持的编码风格，包括用户自定义的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">print(csv.list_dialects())</span><br><span class="line"><span class="comment"># ['excel', 'excel-tab', 'unix']</span></span><br></pre></td></tr></table></figure><h4 id="4-csv-register-dialect-name-dialect-fmtparams"><a href="#4-csv-register-dialect-name-dialect-fmtparams" class="headerlink" title="4.csv.register_dialect(name, [dialect, ]**fmtparams)"></a>4.csv.register_dialect(name, [dialect, ]**fmtparams)</h4><ul><li>创建自定义的 dialect </li><li>name：自定义的 dialect 名字</li><li>其余的是dialect格式参数，包括：delimiter（分隔符，默认的就是逗号）、quotechar、quoting等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个test1的dialect，分隔符用"|"</span></span><br><span class="line">csv.register_dialect(<span class="string">'test1'</span>,delimiter=<span class="string">'|'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ls = csv.reader(f,<span class="string">'test1'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="5-csv-unregister-dialect"><a href="#5-csv-unregister-dialect" class="headerlink" title="5.csv.unregister_dialect()"></a>5.csv.unregister_dialect()</h4><ul><li>name：dialect的名字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">print(csv.list_dialects())</span><br><span class="line">[<span class="string">'excel'</span>, <span class="string">'excel-tab'</span>, <span class="string">'unix'</span>]</span><br><span class="line">csv.register_dialect(<span class="string">'test1'</span>,delimiter=<span class="string">'|'</span>)</span><br><span class="line">print(csv.list_dialects())</span><br><span class="line">[<span class="string">'excel'</span>, <span class="string">'excel-tab'</span>, <span class="string">'unix'</span>, <span class="string">'test1'</span>]</span><br><span class="line">csv.unregister_dialect(<span class="string">'test1'</span>)</span><br><span class="line">print(csv.list_dialects())</span><br><span class="line">[<span class="string">'excel'</span>, <span class="string">'excel-tab'</span>, <span class="string">'unix'</span>]</span><br></pre></td></tr></table></figure><h4 id="6-csv-DictWriter"><a href="#6-csv-DictWriter" class="headerlink" title="6.csv.DictWriter()"></a>6.csv.DictWriter()</h4><ul><li>以字典形式写入</li><li>csvfile：必须是可迭代对象，或者是文件</li><li>fieldnames：字段名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'t.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    fileheader  = [<span class="string">'name'</span>,<span class="string">'age'</span>]</span><br><span class="line">    w = csv.DictWriter(f,fileheader)</span><br><span class="line">    w.writeheader()</span><br><span class="line">    data = [[<span class="string">'Ame'</span>,<span class="number">18</span>],[<span class="string">'Jack'</span>,<span class="number">22</span>],[<span class="string">'Bob'</span>,<span class="number">26</span>]]</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        w.writerow(&#123;<span class="string">'name'</span>:d[<span class="number">0</span>],<span class="string">'age'</span>:d[<span class="number">1</span>]&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><img src="/blog/2019/09/26/csv/3.png">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决pixiv登录机制添加Google V3验证</title>
      <link href="/blog/2019/08/29/pixiv-new-login/"/>
      <url>/blog/2019/08/29/pixiv-new-login/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：本文主要解决爬虫登录pixiv问题。8月份 pixiv 添加 recaptcha_v3(Google V3版本验证)</p></blockquote><a id="more"></a><hr><h2 id="1、Google-V3验证？"><a href="#1、Google-V3验证？" class="headerlink" title="1、Google V3验证？"></a>1、Google V3验证？</h2><blockquote><p>何为 Google 验证码（reCAPTCHA v3）?</p></blockquote><img src="/blog/2019/08/29/pixiv-new-login/1.png"><blockquote><p>reCAPTCHA v3 会以嵌入js的方式，给网站后台返回一个分数，这个分数是用于判断用户是否是机器人，分数的范围是0~1，分数约接近0，越像机器人；</p></blockquote><h2 id="2、使用之前文章中的代码模拟登录-Pixiv"><a href="#2、使用之前文章中的代码模拟登录-Pixiv" class="headerlink" title="2、使用之前文章中的代码模拟登录 Pixiv"></a>2、使用之前文章中的代码模拟登录 Pixiv</h2><p>文章地址：<a href="https://coder-sakura.github.io/blog/2019/03/27/pixiv-one/">Python爬虫-pixiv关注画师作品[1]</a></p><blockquote><p>结果</p></blockquote><img src="/blog/2019/08/29/pixiv-new-login/2.png"><blockquote><p>json 数据格式化一下 ↓</p></blockquote><img src="/blog/2019/08/29/pixiv-new-login/3.png"><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><blockquote><p>我反复登录了几次，网页上并发现没有出现上图的 “I’m not a robot”</p><p>但是在登录抓包却看到 recaptcha_v3_token的值不为空，以前这个字段我记得是空的。</p></blockquote><p>打开登录页面，f12打开调试工具–Network，点击XHR分页，可以看到每隔一段时间，通过 reload 重新请求一个 recaptcha_v3_token</p><p>(稍微等待一下，一会儿就会看到第二个reload出来了) ↓</p><img src="/blog/2019/08/29/pixiv-new-login/4.png"><p>登录的 from data，这个 recaptcha_v3_token ↓</p><img src="/blog/2019/08/29/pixiv-new-login/5.png"><p>截个图，看看请求 recaptcha_v3_token 要 post 的字段 ↓ </p><img src="/blog/2019/08/29/pixiv-new-login/6.png"><img src="/blog/2019/08/29/pixiv-new-login/7.jpg"><h2 id="4、解决方案"><a href="#4、解决方案" class="headerlink" title="4、解决方案"></a>4、解决方案</h2><p>1、手动抓包，在 headers 加入cookie 字段</p><img src="/blog/2019/08/29/pixiv-new-login/8.png"><p>图太长，手动省略 ↓</p><img src="/blog/2019/08/29/pixiv-new-login/9.png"><p>2、selenium 抓取 （略）</p><p>个人比较喜欢用纯代码实现，虽然 selenium 也是要写代码。</p><img src="/blog/2019/08/29/pixiv-new-login/10.jpg"><p>3、selenium + requests (正文)</p><blockquote><p>[Warning]:该方法食用前，请先确保手动在 Chrome 上登录 pixiv</p><p>selenium 自动保存 cookies</p><p>requests 读取 cookies 并维持会话</p></blockquote><center><font size="6">Talk is cheap , Show me code</font></center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.cookies <span class="keyword">import</span> RequestsCookieJar</span><br><span class="line"></span><br><span class="line"><span class="comment"># user data目录</span></span><br><span class="line">pro_dir = <span class="string">r'C:\Users\Hatsune Miku\AppData\Local\Google\Chrome\User Data'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取本地cookies</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 添加配置</span></span><br><span class="line">    chrome_options = webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment"># 静默模式</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    <span class="comment"># 添加user data目录</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">'user-data-dir='</span>+os.path.abspath(pro_dir))</span><br><span class="line">    driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">    <span class="comment"># 访问后,获取cookies</span></span><br><span class="line">    driver.get(<span class="string">'https://www.pixiv.net/'</span>)</span><br><span class="line">    cookies = driver.get_cookies()</span><br><span class="line">    <span class="comment"># 保存cookies</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"pixiv_cookies.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        json.dump(cookies, fp)</span><br><span class="line">    driver.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    读取cookies</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    jar = RequestsCookieJar()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"pixiv_cookies.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        cookies = json.load(fp)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">            jar.set(cookie[<span class="string">'name'</span>], cookie[<span class="string">'value'</span>])</span><br><span class="line">    <span class="keyword">return</span> jar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rep</span><span class="params">(jar)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    携带cookies对象并验证</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 此为个人关注画师页面</span></span><br><span class="line">    url = <span class="string">'https://www.pixiv.net/bookmark.php?type=user'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">            <span class="string">'referer'</span>: <span class="string">'https://accounts.pixiv.net/login'</span>,</span><br><span class="line">            <span class="string">'origin'</span>: <span class="string">'https://accounts.pixiv.net'</span>,</span><br><span class="line">            <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) '</span></span><br><span class="line">                 <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>&#125;</span><br><span class="line">    html = se.get(url,headers=headers,cookies=jar)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_cookie()</span><br><span class="line">    se = requests.session()<span class="comment"># 定义session对象</span></span><br><span class="line">    jar = read_cookie()</span><br><span class="line">    html = rep(jar)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'bookmark.html'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(html.text)</span><br><span class="line">    os.system(<span class="string">'start bookmark.html'</span>) <span class="comment"># 打开文件</span></span><br></pre></td></tr></table></figure><blockquote><p>结果展示</p><p>代码运行结束，会打开一个个人关注画师网页（selenium运行中的警报再想办法处理了）</p></blockquote><img src="/blog/2019/08/29/pixiv-new-login/10.png"><blockquote><p>可以将上面代码稍作修改，然后再封装成一个获取 cookies 对象的函数，后面直接携带这个 cookies 就行了</p><p>剩下的，想要拿收藏的插画√、关注的画师√、排行榜插画√ 都是可以的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> lxml </tag>
            
            <tag> requests </tag>
            
            <tag> pixiv </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0613</title>
      <link href="/blog/2019/06/15/pythondailyquestion-0613/"/>
      <url>/blog/2019/06/15/pythondailyquestion-0613/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：0612-每日一问</p></blockquote><a id="more"></a><img src="/blog/2019/06/15/pythondailyquestion-0613/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、基础题"><a href="#1、基础题" class="headerlink" title="1、基础题"></a>1、基础题</h2><blockquote><p>从标准输入读取两个整数并打印两行，<br>其中第一行输出两个整数的整除结果；<br>第二行输出两个整数的带小数的除法结果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'exp:12 24'</span>)</span><br><span class="line">nums = input(<span class="string">'input tow nums:'</span>)</span><br><span class="line"></span><br><span class="line">a,b = nums.split(<span class="string">' '</span>)</span><br><span class="line">print(int(a)//int(b))</span><br><span class="line">print(<span class="string">'%.2f'</span>%(int(a)/int(b)))</span><br></pre></td></tr></table></figure><h2 id="2、基础题"><a href="#2、基础题" class="headerlink" title="2、基础题"></a>2、基础题</h2><blockquote><p>使用turtle库，绘制一个风轮效果，其中，每个风轮内角为45度，风轮边长150像素。‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>提示：turtle.goto(x,y)函数，能够将turtle画笔移动到坐标(x,y)</p></blockquote><img src="/blog/2019/06/15/pythondailyquestion-0613/1.jpg"><h2 id="3、提高题"><a href="#3、提高题" class="headerlink" title="3、提高题"></a>3、提高题</h2><blockquote><p>列表中有一个数字出现的次数超过列表长度的一半，请找出这个数字。<br>例如，输入一个长度为 9 的列表[1, 2, 3, 2, 2, 2, 5, 4, 2]。<br>数字 2 出现了5次，超过列表长度的一半，因此输出2。<br>如果不存在则输出0。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以自己指定数组,这里随机生成</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">lens = int(input(<span class="string">'The len is :'</span>))</span><br><span class="line"></span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(lens):</span><br><span class="line">    t.append(random.choice(range(lens)))</span><br><span class="line">print(<span class="string">'数组为'</span>,t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list(set(t)):</span><br><span class="line">    <span class="keyword">if</span> t.count(i) &gt; lens//<span class="number">2</span>:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0612</title>
      <link href="/blog/2019/06/15/pythondailyquestion-0612/"/>
      <url>/blog/2019/06/15/pythondailyquestion-0612/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：0612-每日一问</p></blockquote><a id="more"></a><img src="/blog/2019/06/15/pythondailyquestion-0612/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、概念题"><a href="#1、概念题" class="headerlink" title="1、概念题"></a>1、概念题</h2><blockquote><p>请简述python中有哪些方式实现字符串格式化？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">b = <span class="string">'world'</span></span><br><span class="line">print(a,b)</span><br><span class="line">print(<span class="string">'%s %s'</span>%(a,b))</span><br><span class="line">print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(a,b))</span><br></pre></td></tr></table></figure><h2 id="2、基础题"><a href="#2、基础题" class="headerlink" title="2、基础题"></a>2、基础题</h2><blockquote><p>温度的刻画有两个不同体系：摄氏度（Celsius）和华氏度（Fahrenheit）。‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>请编写程序将用户输入华氏度转换为摄氏度，或将输入的摄氏度转换为华氏度。‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>转换算法如下：（C表示摄氏度、F表示华氏度）‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>         C = ( F - 32 ) / 1.8‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>         F = C * 1.8 + 32‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>要求如下：‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>(1) 输入输出的摄氏度可采用大小写字母C结尾，温度可以是整数或小数，如：12.34C指摄氏度12.34度；‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>(2) 输入输出的华氏度可采用大小写字母F结尾，温度可以是整数或小数，如：87.65F指摄氏度87.65度；‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>(3) 输出保留小数点后两位，输入格式错误时，输出提示：输入格式错误；‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬<br>(4) 使用input()获得测试用例输入时，不要增加提示字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> t[<span class="number">-1</span>].upper() == <span class="string">'C'</span>:</span><br><span class="line">        t = float(t[:<span class="number">-1</span>])*<span class="number">1.8</span>+<span class="number">32</span></span><br><span class="line">        print(<span class="string">'%.2fF'</span>%t)</span><br><span class="line">    <span class="keyword">elif</span> t[<span class="number">-1</span>].upper() == <span class="string">'F'</span>:</span><br><span class="line">        t = float(t[:<span class="number">-1</span>])<span class="number">-32</span>/<span class="number">1.8</span></span><br><span class="line">        print(<span class="string">'%.2fC'</span>%t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'格式错误'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># print('Exp:12.34C、87.65F')</span></span><br><span class="line">    Temperature = input(<span class="string">'The Temperature is:'</span>)</span><br><span class="line">    change(Temperature)</span><br></pre></td></tr></table></figure><h2 id="3、提高题"><a href="#3、提高题" class="headerlink" title="3、提高题"></a>3、提高题</h2><blockquote><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，<br>使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，<br>并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'exp整数数组:123456'</span>)</span><br><span class="line">int_list = list(input(<span class="string">'Input The Integer Array:'</span>))</span><br><span class="line">even_list = [] <span class="comment"># 偶数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> int_list:</span><br><span class="line">    <span class="keyword">if</span> int(i)%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        int_list.remove(i)</span><br><span class="line">        even_list.append(i)</span><br><span class="line"></span><br><span class="line">int_list.extend(even_list)</span><br><span class="line">print(int_list)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0611</title>
      <link href="/blog/2019/06/14/pythondailyquestion-0611/"/>
      <url>/blog/2019/06/14/pythondailyquestion-0611/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：0611-每日一问</p></blockquote><a id="more"></a><img src="/blog/2019/06/14/pythondailyquestion-0611/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、基础题"><a href="#1、基础题" class="headerlink" title="1、基础题"></a>1、基础题</h2><blockquote><p>给定任意一个整数，打印出该整数的十进制、八进制、十六进制（大写）、二进制形式的字符串。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int_num = int(input(<span class="string">'input the integer'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转二进制</span></span><br><span class="line">print(<span class="string">'二进制形式为 : &#123;&#125;'</span>.format(bin(int_num)))</span><br><span class="line"><span class="comment"># 转八进制</span></span><br><span class="line">print(<span class="string">'八进制形式为 : &#123;&#125;'</span>.format(oct(int_num)))</span><br><span class="line"><span class="comment"># 转十进制</span></span><br><span class="line">print(<span class="string">'十进制形式为 : &#123;&#125;'</span>.format(int(int_num)))</span><br><span class="line"><span class="comment"># 转十六进制</span></span><br><span class="line">print(<span class="string">'十六进制形式为 : &#123;&#125;'</span>.format(hex(int_num).upper()))</span><br></pre></td></tr></table></figure><h2 id="2、基础题"><a href="#2、基础题" class="headerlink" title="2、基础题"></a>2、基础题</h2><blockquote><p>给用户三次输入用户名和密码的机会，要求如下：‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</p><ol><li>如输入第一行输入用户名为‘Kate’,第二行输入密码为‘666666’，输出‘登录成功！’，退出程序；‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</li><li>当一共有3次输入用户名或密码不正确输出“3次用户名或者密码均有误！退出程序。”。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">admin_username,admin_password = <span class="string">'Kate'</span>,<span class="string">'666666'</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">username = input(<span class="string">'Input Your Username: '</span>)</span><br><span class="line">password = input(<span class="string">'Input Your Password: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> all([username==admin_username, password==admin_password]):</span><br><span class="line">print(<span class="string">'登录成功'</span>)</span><br><span class="line">sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'用户名或密码错误\n'</span>)</span><br><span class="line">count += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="3、提高题"><a href="#3、提高题" class="headerlink" title="3、提高题"></a>3、提高题</h2><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。<br>求该青蛙跳上一个n级的台阶总共有多少种跳法</p><ul><li>注：先后次序不同 算作是不同的结果</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归,参考</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">return</span> jump(n<span class="number">-1</span>) + jump(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">print(jump(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0610</title>
      <link href="/blog/2019/06/14/pythondailyquestion-0610/"/>
      <url>/blog/2019/06/14/pythondailyquestion-0610/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><h4 id="本篇概述：0610-每日一问"><a href="#本篇概述：0610-每日一问" class="headerlink" title="本篇概述：0610-每日一问"></a>本篇概述：0610-每日一问</h4></blockquote><a id="more"></a><img src="/blog/2019/06/14/pythondailyquestion-0610/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、基础题"><a href="#1、基础题" class="headerlink" title="1、基础题"></a>1、基础题</h2><blockquote><p>恺撒密码是古罗马恺撒大帝用来对军事情报进行加解密的算法，它采用了替换方法对信息中的每一个英文字符循环替换为字母表序列中该字符后面的第三个字符，即，字母表的对应关系如下：‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</p><p>原文：A B C D E F G H I J K L M N O P Q R S T U V W X Y Z‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</p><p>密文：D E F G H I J K L M N O P Q R S T U V W X Y Z A B C‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</p><p>对于原文字符P，其密文字符C满足如下条件：C=(P+3) mod 26‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</p><p>上述是凯撒密码的加密方法，解密方法反之，即：P=(C-3) mod 26‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬‬</p><p>假设用户可能使用的输入包含大小写字母a~zA~Z、空格和特殊符号，请编写一个程序，对输入字符串进行恺撒密码加密，直接输出结果，其中空格不用进行加密处理。使用input()获得输入。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先知道2个函数</span></span><br><span class="line">ord()<span class="comment"># str -&gt; ascii</span></span><br><span class="line">chr()<span class="comment"># ascii -&gt; str</span></span><br><span class="line"></span><br><span class="line">ord(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment"># 97</span></span><br><span class="line">chr(ord(<span class="string">'a'</span>))</span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a位移1位</span></span><br><span class="line"><span class="comment"># ord('a')=97，ord('b')=98</span></span><br><span class="line">chr(ord(<span class="string">'a'</span>)+((<span class="number">98</span><span class="number">-97</span>)+<span class="number">1</span>)%<span class="number">26</span>)</span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># z位移1位</span></span><br><span class="line"><span class="comment"># ord('a')=97，ord('z')=122</span></span><br><span class="line">chr(ord(<span class="string">'a'</span>)+((<span class="number">122</span><span class="number">-97</span>)+<span class="number">1</span>)%<span class="number">26</span>)</span><br><span class="line"><span class="comment"># a</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'za %test'</span><span class="comment"># 加密字符串</span></span><br><span class="line">offset = <span class="number">3</span>    <span class="comment"># 偏移量</span></span><br><span class="line">target = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'a'</span> &lt;= w &lt;= <span class="string">'z'</span>:</span><br><span class="line">        target += chr( ord(<span class="string">'a'</span>) + ((ord(w)-ord(<span class="string">'a'</span>)) + offset )%<span class="number">26</span> )</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'A'</span>&lt;= w &lt;=<span class="string">'Z'</span>:</span><br><span class="line">        target += chr( ord(<span class="string">'A'</span>) + ((ord(w)-ord(<span class="string">'A'</span>)) + offset )%<span class="number">26</span> )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        target += w</span><br></pre></td></tr></table></figure><h2 id="2、提高题"><a href="#2、提高题" class="headerlink" title="2、提高题"></a>2、提高题</h2><blockquote><p>请实现一个函数用来找出字符串中第1个只出现1次的字符。<br>例如：<br>当从字符串中只读出前两个字符”go”时，第1个只出现次的字符是”g”。<br>当从该字符串中读出前六个字符”google”时，第1个只出现1次的字符是“l”。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = input(<span class="string">'input the word:'</span>)</span><br><span class="line"><span class="keyword">for</span> a1 <span class="keyword">in</span> a:</span><br><span class="line"><span class="keyword">if</span> a.count(a1) == <span class="number">1</span>:</span><br><span class="line">print(<span class="string">'第一个只出现一次的字符为&#123;&#125;'</span>.format(a1))</span><br><span class="line">sys.exit()</span><br><span class="line">print(<span class="string">'没有只出现一次的字符'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(更新动图)Python爬虫-pixiv关注画师作品[3]</title>
      <link href="/blog/2019/06/12/pixiv-three/"/>
      <url>/blog/2019/06/12/pixiv-three/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：<a href="https://coder-sakura.github.io/blog/2019/03/30/pixiv-two/">第二篇</a>的续作，主要是各种图片类型的下载和文件夹创建；</p><p> <a href="https://github.com/Coder-Sakura/pixiv_crawler" target="_blank" rel="noopener">github地址</a>、文中代码不一定能直接执行，粘贴过来可能缩进有问题。</p></blockquote><a id="more"></a><img src="/blog/2019/06/12/pixiv-three/HeadPicture.jpg"><hr><h2 id="1、分析——如何判断类型？"><a href="#1、分析——如何判断类型？" class="headerlink" title="1、分析——如何判断类型？"></a>1、分析——如何判断类型？</h2><blockquote><p>单图 ↓</p></blockquote><img src="/blog/2019/06/12/pixiv-three/3.png"><blockquote><p>多图 ↓</p></blockquote><img src="/blog/2019/06/12/pixiv-three/2.png"><blockquote><p>动图</p></blockquote><img src="/blog/2019/06/12/pixiv-three/1.png"><hr><blockquote><p> 仔细观察就会发现：</p><ol><li>单图 url : 56309403_p0_square1200.jpg，有p0；pageCount：1</li><li>多图 url : 56527887_p0_square1200.jpg，有p0；pageCount：3</li><li>动图 url : 57027347_square1200.jpg，无p0；pageCount：1</li></ol></blockquote><hr><h2 id="2、代码——匹配类型"><a href="#2、代码——匹配类型" class="headerlink" title="2、代码——匹配类型"></a>2、代码——匹配类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">painter_picture</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    上次的code</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> pageCount == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 有p0</span></span><br><span class="line">        <span class="comment"># 2016/05/23/19/25/26/57027442_p0</span></span><br><span class="line">        <span class="comment"># 无p0</span></span><br><span class="line">        <span class="comment"># 2016/05/23/19/18/47/57027347</span></span><br><span class="line">        <span class="keyword">if</span> small_url[<span class="number">51</span>:<span class="number">-15</span>][<span class="number">-2</span>:] == <span class="string">'p0'</span>:</span><br><span class="line">            print(<span class="string">'作品类型：单图\n'</span>)</span><br><span class="line">            self.img_single(small_url,folder_path,folder_id) <span class="comment"># 单图</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'作品类型：动图\n'</span>)</span><br><span class="line">            self.img_gif(folder_path,folder_id) <span class="comment"># 动图</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'作品类型：多图\n'</span>)</span><br><span class="line">        self.img_multi(small_url,folder_path,folder_id,pageCount) <span class="comment"># 多图</span></span><br></pre></td></tr></table></figure><hr><h2 id="PS：拼接-url-时不要问为啥这么麻烦，看这里"><a href="#PS：拼接-url-时不要问为啥这么麻烦，看这里" class="headerlink" title="PS：拼接 url 时不要问为啥这么麻烦，看这里"></a>PS：拼接 url 时不要问为啥这么麻烦，看这里</h2><ol><li>本篇记录的是自己刚学python爬虫第一个爬虫项目的代码，这篇的代码可以说是仅仅是为了实现功能写出来的。</li><li>现在也有想法要重构，重构好之后发篇完整的出来，不过没有那么快而已。</li><li><strong>现在找到了作品的详细信息接口，后面再更新了，这里用的是之前的方法。</strong></li><li>回首看自己2个月前的代码，一点都不优雅。o(╥﹏╥)o</li></ol><hr><h2 id="3、分析——创建画师文件夹及作品文件夹"><a href="#3、分析——创建画师文件夹及作品文件夹" class="headerlink" title="3、分析——创建画师文件夹及作品文件夹"></a>3、分析——创建画师文件夹及作品文件夹</h2><ol><li>首先指定一个下载目录</li><li>下载目录下为每个画师创建一个文件夹，形如：{id}–{name}</li><li>画师文件夹下为每个作品创建一个文件夹，形如：{id}</li></ol><hr><h2 id="4、代码——文件夹"><a href="#4、代码——文件夹" class="headerlink" title="4、代码——文件夹"></a>4、代码——文件夹</h2><h3 id="1、创建画师文件夹"><a href="#1、创建画师文件夹" class="headerlink" title="1、创建画师文件夹"></a>1、创建画师文件夹</h3><blockquote><p>此处解决了画师更改名字，会导致该画师所有作品重下。</p><p>具体看代码吧，解释也挺麻烦的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行 mkdir_painter() 应在 attention_html() 的 painter_information 循环中</span></span><br><span class="line"><span class="comment"># self.father_folder = self.mkdir_painter(painter_id,name)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir_painter</span> <span class="params">(self,painter_id,name)</span>:</span></span><br><span class="line">name = re.sub(<span class="string">'[\/:*?"&lt;&gt;|]'</span>,<span class="string">'_'</span>,name)</span><br><span class="line">folder_name = painter_id + <span class="string">'--'</span> + name</span><br><span class="line"><span class="comment"># 画师改名字！会导致重下</span></span><br><span class="line"><span class="keyword">for</span> folder <span class="keyword">in</span> os.listdir(self.path):</span><br><span class="line"><span class="keyword">if</span> painter_id == folder.split(<span class="string">'--'</span>)[<span class="number">0</span>]:</span><br><span class="line">print(<span class="string">u'[名字叫&#123;0&#125;文件夹已存在！]'</span>.format(folder_name))</span><br><span class="line">father_folder = os.path.join(self.path,folder)</span><br><span class="line">os.chdir(father_folder) <span class="comment">##切换到目录</span></span><br><span class="line"><span class="keyword">return</span> father_folder</span><br><span class="line"></span><br><span class="line">print(<span class="string">u'[建了一个&#123;0&#125;文件夹！]'</span>.format(folder_name))</span><br><span class="line">father_folder = os.path.join(self.path,folder_name)</span><br><span class="line">os.makedirs(father_folder)</span><br><span class="line">os.chdir(father_folder) <span class="comment">##切换到目录</span></span><br><span class="line"><span class="keyword">return</span> father_folder</span><br></pre></td></tr></table></figure><h3 id="2、创建作品文件夹"><a href="#2、创建作品文件夹" class="headerlink" title="2、创建作品文件夹"></a>2、创建作品文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir_works</span><span class="params">(self,folder_id)</span>:</span></span><br><span class="line">    folder_path = os.path.join(self.father_folder,folder_id)</span><br><span class="line">    isExists = os.path.exists(folder_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        print(<span class="string">u'\n[在'</span>,self.father_folder,<span class="string">'下建了一个'</span>, folder_id, <span class="string">u'文件夹！]'</span>)</span><br><span class="line">        os.makedirs(folder_path)</span><br><span class="line">        os.chdir(folder_path) <span class="comment">##切换到目录</span></span><br><span class="line">        <span class="keyword">return</span> folder_path</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">u'\n[在'</span>,self.father_folder,<span class="string">'下已经有'</span>, folder_id, <span class="string">u'文件夹！]'</span>)</span><br><span class="line">        os.chdir(folder_path) <span class="comment">##切换到目录</span></span><br><span class="line">        <span class="keyword">return</span> folder_path</span><br></pre></td></tr></table></figure><hr><h2 id="5、单图下载"><a href="#5、单图下载" class="headerlink" title="5、单图下载"></a>5、单图下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_single</span><span class="params">(self,small_url,folder_path,folder_id)</span>:</span></span><br><span class="line">work_name = folder_id + small_url[<span class="number">-4</span>:]</span><br><span class="line"><span class="comment"># p站的图片有jpg和png的，但是从works_url获取到的只有小图jpg的url</span></span><br><span class="line">jpg_judge_path = folder_path + <span class="string">'\\'</span> + work_name            </span><br><span class="line">png_judge_path = folder_path + <span class="string">'\\'</span> + folder_id + <span class="string">'.png'</span>   </span><br><span class="line"><span class="comment"># 判断是否是上次因为jpg不行而下载png的图片，如果是的话，expand_name 用 .png 替换进行比对是否重复</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(jpg_judge_path) == <span class="keyword">True</span> <span class="keyword">and</span> os.path.getsize(jpg_judge_path) != <span class="number">58</span>:   </span><br><span class="line"><span class="comment"># 判断jpg</span></span><br><span class="line">print(jpg_judge_path,<span class="string">'已存在且字节数不为58！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> os.path.exists(png_judge_path) == <span class="keyword">True</span> <span class="keyword">and</span> os.path.getsize(png_judge_path) != <span class="number">58</span>:</span><br><span class="line"><span class="comment"># 判断png</span></span><br><span class="line">print(png_judge_path,<span class="string">'已存在且字节数不为58！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">small_date = small_url[<span class="number">51</span>:<span class="number">-15</span>]  <span class="comment">#动图的small_url没有p0</span></span><br><span class="line">head = <span class="string">'https://i.pximg.net/img-original/img/'</span></span><br><span class="line">img_url = head + small_date + small_url[<span class="number">-4</span>:]        <span class="comment">#.jpg</span></span><br><span class="line">img_html = self.request(img_url)</span><br><span class="line">self.down(img_html,work_name,jpg_judge_path)</span><br><span class="line"><span class="comment"># time.sleep(2)</span></span><br><span class="line"><span class="keyword">if</span> os.path.getsize(jpg_judge_path) == <span class="number">58</span>:</span><br><span class="line">print(<span class="string">'&#123;&#125;格式不对，准备重下'</span>.format(work_name))</span><br><span class="line">img_url = head + small_date + <span class="string">'.png'</span></span><br><span class="line">img_html = self.request(img_url)</span><br><span class="line">self.down_conversion(img_html,folder_id,jpg_judge_path,png_judge_path)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">print(work_name,<span class="string">'下载失败'</span>)</span><br></pre></td></tr></table></figure><h2 id="6、多图下载"><a href="#6、多图下载" class="headerlink" title="6、多图下载"></a>6、多图下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_multi</span><span class="params">(self,small_url,folder_path,folder_id,pageCount)</span>:</span></span><br><span class="line"><span class="keyword">for</span> img_num <span class="keyword">in</span> range(<span class="number">0</span>,pageCount):</span><br><span class="line">work_name = folder_id + <span class="string">'-'</span> + str(img_num) + small_url[<span class="number">-4</span>:]       </span><br><span class="line">jpg_judge_path = folder_path + <span class="string">'\\'</span> + work_name</span><br><span class="line"><span class="keyword">if</span> os.path.exists(jpg_judge_path) == <span class="keyword">True</span> <span class="keyword">and</span> os.path.getsize(jpg_judge_path) != <span class="number">58</span>:</span><br><span class="line">print(jpg_judge_path,<span class="string">'已存在且字节数不为58！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">multi_url = <span class="string">'https://www.pixiv.net/member_illust.php?mode=manga_big&amp;illust_id='</span> +folder_id + <span class="string">'&amp;page='</span> + str(img_num)</span><br><span class="line">self.headers[<span class="string">'User-Agent'</span>] = random.choice(self.user_agent_list)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">multi_html = self.request(multi_url)</span><br><span class="line">multi_html_soup = BeautifulSoup(multi_html.text, <span class="string">'lxml'</span>)</span><br><span class="line">img_url = multi_html_soup.find(<span class="string">'img'</span>)[<span class="string">'src'</span>]     <span class="comment">#要请求src的地址再写入      </span></span><br><span class="line">img_html = self.request(img_url)</span><br><span class="line">self.down(img_html,work_name,jpg_judge_path)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">print(work_name,<span class="string">'下载失败'</span>)</span><br></pre></td></tr></table></figure><h2 id="7、动图"><a href="#7、动图" class="headerlink" title="7、动图"></a>7、动图</h2><p>P站动图其实只是多个图片设置页面停留时间而已，所以需要我们手动合成。</p><blockquote><p>1.在动图的源文件地址(是个 zip 文件)，里面有关于每个图片的 delay (也就是页面停留时间)和图片文件。<br>2.下载 zip，解压，用 imageio 进行合成，指定合成 gif 的帧率为 delay 就行了</p></blockquote><p>但是存在一个问题，有些动图的每个图片设置的页面停留时间不同，这就让人很难搞了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="comment"># 记得没有用到PIL,但防止意外,我就先放这里了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取压缩包网址</span></span><br><span class="line">zip_url = <span class="string">'https://www.pixiv.net/ajax/illust/'</span> +folder_id + <span class="string">'/ugoira_meta</span></span><br><span class="line"><span class="string">zip_html = self.request(zip_url</span></span><br><span class="line"><span class="string">zip_json = json.loads(zip_html.text)</span></span><br><span class="line"><span class="string">zip_originalSrc = zip_json["body"]["src"]</span></span><br><span class="line"><span class="string"># 计算帧率</span></span><br><span class="line"><span class="string">delay = 1/(zip_json["body"]["frames"][0]['</span>delay<span class="string">']/1000)     #80(ms)/1000 -&gt; 0.08(s)</span></span><br><span class="line"><span class="string">print('</span>帧率:<span class="string">',delay)</span></span><br><span class="line"><span class="string"># 下载zip</span></span><br><span class="line">headers['Referer'] = 'https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=' + folder_id</span><br><span class="line">gif_html = self.request(zip_originalSrc)</span><br><span class="line">zip_name = folder_id + <span class="string">'.zip'</span></span><br><span class="line">f = open(zip_name, <span class="string">'ab'</span>)</span><br><span class="line">f.write(gif_html.content)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 解压zip</span></span><br><span class="line">f = zipfile.ZipFile(zip_name,<span class="string">'r'</span>)   </span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> f.namelist():</span><br><span class="line">    f.extract(file,<span class="string">"."</span>)</span><br><span class="line">f.close()</span><br><span class="line">print(<span class="string">'解压完成'</span>)</span><br><span class="line">os.remove(zip_name)             <span class="comment"># 删除压缩包</span></span><br><span class="line">gif_name = folder_id + <span class="string">'.gif'</span>   <span class="comment"># gif图片name</span></span><br><span class="line">frames = []                     <span class="comment"># 用来存储要进行合成gif的图片</span></span><br><span class="line">files = os.listdir(folder_path) <span class="comment"># 扫描当前作品目录下的文件</span></span><br><span class="line">print(<span class="string">'开始合成'</span>)</span><br><span class="line"><span class="keyword">for</span> image_num <span class="keyword">in</span> range(<span class="number">1</span>,len(files)):</span><br><span class="line">    frames.append(imageio.imread(files[image_num]))</span><br><span class="line">imageio.mimsave(gif_name, frames, <span class="string">'GIF'</span>, fps  = delay) <span class="comment"># 间隔</span></span><br><span class="line">print(folder_id,<span class="string">'动图下载完成！'</span>)</span><br><span class="line"><span class="comment"># 删除解压出的图片</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    os.remove(file)</span><br></pre></td></tr></table></figure><h2 id="8、最后"><a href="#8、最后" class="headerlink" title="8、最后"></a>8、最后</h2><blockquote><p>鸽了挺久的，觉得大部分东西代码和实践都说得清楚，毕竟不是教程贴ヽ(ー_ー)ノ</p><p><a href="https://github.com/Coder-Sakura/pixiv_crawler" target="_blank" rel="noopener">github地址</a>、文中代码不一定能直接执行，复制粘贴的。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> lxml </tag>
            
            <tag> requests </tag>
            
            <tag> pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0603</title>
      <link href="/blog/2019/06/04/pythondailyquestion-0603/"/>
      <url>/blog/2019/06/04/pythondailyquestion-0603/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><h4 id="本篇概述：0603-每日一问"><a href="#本篇概述：0603-每日一问" class="headerlink" title="本篇概述：0603-每日一问"></a>本篇概述：0603-每日一问</h4></blockquote><a id="more"></a><img src="/blog/2019/06/04/pythondailyquestion-0603/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、基础题"><a href="#1、基础题" class="headerlink" title="1、基础题"></a>1、基础题</h2><blockquote><p>列表sent = [‘she’, ‘sells’, ‘sea’, ‘shells’, ‘by’, ‘the’, ‘sea’, ‘shore’]。<br>编写代码执行以下任务：<br>a. 输出所有 sh 开头的单词<br>b. 输出所有长度超过 4 个字符的词</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sent = [<span class="string">'she'</span>, <span class="string">'sells'</span>, <span class="string">'sea'</span>, <span class="string">'shells'</span>, <span class="string">'by'</span>, <span class="string">'the'</span>, <span class="string">'sea'</span>, <span class="string">'shore'</span>]</span><br><span class="line">print([s <span class="keyword">for</span> s <span class="keyword">in</span> sent <span class="keyword">if</span> s.startswith(<span class="string">'sh'</span>) <span class="keyword">and</span> len(s)&gt;<span class="number">4</span>])</span><br></pre></td></tr></table></figure><h2 id="2、提高题"><a href="#2、提高题" class="headerlink" title="2、提高题"></a>2、提高题</h2><blockquote><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。<br>数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。<br>请找出数组中任意一个重复的数字。<br>例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，<br>那么对应的输出是第一个重复的数字2。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x = []</span><br><span class="line">n = input(<span class="string">'数组长度为:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 生成数组</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(n)):</span><br><span class="line">    x.append(random.choice(range(n)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成数组</span></span><br><span class="line"><span class="keyword">while</span> len(x) != n:</span><br><span class="line">x.append(random.choice(range(n)))</span><br><span class="line"><span class="keyword">if</span> len(x) == n:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="comment"># 输出第一个重复的数字               </span></span><br><span class="line"><span class="keyword">for</span> x1 <span class="keyword">in</span> x:</span><br><span class="line"><span class="keyword">if</span> x.count(x1) &gt;= <span class="number">2</span>:</span><br><span class="line">print(<span class="string">'第一个重复的数字为'</span>,x1)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0530</title>
      <link href="/blog/2019/05/31/pythondailyquestion-0530/"/>
      <url>/blog/2019/05/31/pythondailyquestion-0530/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：0530-每日一问</p></blockquote><a id="more"></a><img src="/blog/2019/05/31/pythondailyquestion-0530/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、基础题"><a href="#1、基础题" class="headerlink" title="1、基础题"></a>1、基础题</h2><blockquote><p>设计一个复利计算函数invest（）<br>它包含三个参数：amount（资金），rate（年利率），time（投资时间）。<br>键盘输入每个参数后，输出结果：返回每一年的资金总额<br>比如，amount = 10000 , rate = 8% ,time = 5</p><p>(复利计算公式原理自行百度)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invest</span><span class="params">()</span>:</span></span><br><span class="line">    amount = int(input(<span class="string">'input your amount:'</span>))</span><br><span class="line">    rate = float(input(<span class="string">'rate is:'</span>))</span><br><span class="line">    time = int(input(<span class="string">'your cycle is:'</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,time+<span class="number">1</span>):</span><br><span class="line">    amount *= (<span class="number">1</span>+rate)</span><br><span class="line">    print(<span class="string">'第&#123;&#125;年 : &#123;&#125;'</span>.format(i,amount)) </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">invest()</span><br></pre></td></tr></table></figure><h2 id="2、提高题"><a href="#2、提高题" class="headerlink" title="2、提高题"></a>2、提高题</h2><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。<br>例如，当字符串为We Are Happy<br>则经过替换之后的字符串为We%20Are%20Happy。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.</span></span><br><span class="line">print(<span class="string">'We Are Happy'</span>.replace(<span class="string">' '</span>,<span class="string">'%20'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">print(re.sub(<span class="string">r' '</span>,<span class="string">'%20'</span>,<span class="string">'We Are Happy'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0529</title>
      <link href="/blog/2019/05/31/pythondailyquestion-0529/"/>
      <url>/blog/2019/05/31/pythondailyquestion-0529/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：0529-每日一问</p></blockquote><a id="more"></a><img src="/blog/2019/05/31/pythondailyquestion-0529/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、基础题"><a href="#1、基础题" class="headerlink" title="1、基础题"></a>1、基础题</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">809</span>*<span class="keyword">x</span>=<span class="number">800</span>*<span class="keyword">x</span>+<span class="number">9</span>*<span class="keyword">x</span></span><br><span class="line"><span class="keyword">x</span>代表的是两位数</span><br><span class="line"><span class="number">8</span>*<span class="keyword">x</span>的结果为<span class="number">2</span>位数</span><br><span class="line"><span class="number">9</span>*<span class="keyword">x</span>的结果为<span class="number">3</span>位数</span><br><span class="line">求<span class="keyword">x</span>及<span class="number">809</span>×<span class="keyword">x</span>结果</span><br></pre></td></tr></table></figure><blockquote><p>代码如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">100</span>):</span><br><span class="line"><span class="keyword">if</span> (<span class="number">10</span>&lt;=<span class="number">8</span>*x&lt;=<span class="number">100</span>) <span class="keyword">and</span> (<span class="number">100</span>&lt;=<span class="number">9</span>*x&lt;=<span class="number">1000</span>):</span><br><span class="line">print(<span class="number">809</span>*x)</span><br><span class="line"><span class="comment"># 9708</span></span><br></pre></td></tr></table></figure><h2 id="2、提高题"><a href="#2、提高题" class="headerlink" title="2、提高题"></a>2、提高题</h2><blockquote><p>1.对文件”命运.txt”进行字符频次统计，<br>并将所有字符按照频次高低排序，<br>将排序后的字符及其频次输出到文件”命运-频次排序.txt”</p><p>字符包括中文、英文、标点等，但不包括空格和回车<br>输出格式要求：<br>(1)字符与频次之间采用冒号 ：分隔<br>(2)一个字符一行，比如<br>理:224<br>斯:120<br>卫:100</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">r'命运.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">m = f.read().replace(<span class="string">'\n'</span>,<span class="string">''</span>)</span><br><span class="line">target = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> m:</span><br><span class="line">target[word] = target.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="comment"># print(target)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">target = sorted(target.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'命运-频次排序.txt'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> output:</span><br><span class="line"><span class="keyword">for</span> tar,count <span class="keyword">in</span> target:</span><br><span class="line">output.write(<span class="string">'&#123;&#125;:&#123;&#125;\n'</span>.format(tar,count))</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p><code>命运.txt</code>下载</p><p>链接：<a href="https://www.lanzous.com/b757208/" target="_blank" rel="noopener">https://www.lanzous.com/b757208/</a>   密码：f0il</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PythonDailyQuestion-0528</title>
      <link href="/blog/2019/05/31/pythondailyquestion-0528/"/>
      <url>/blog/2019/05/31/pythondailyquestion-0528/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：0528-每日一问</p></blockquote><a id="more"></a><img src="/blog/2019/05/31/pythondailyquestion-0528/HeadPicture.jpg"><hr><blockquote><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>github：<a href="https://github.com/Elegant-Smile/PythonDailyQuestion" target="_blank" rel="noopener">https://github.com/Elegant-Smile/PythonDailyQuestion</a></p></blockquote><h2 id="1、基础题"><a href="#1、基础题" class="headerlink" title="1、基础题"></a>1、基础题</h2><blockquote><p>从键盘输入4个数字，各数字采用空格分隔，对应为变量x0,y0,x1,y1。<br>计算(x0，y0)和(x1,y1)两点之间的距离，输出结果保留1位小数。<br>比如，键盘输入：0 1 3 5，屏幕输出：5.0</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = input(<span class="string">'input your number:'</span>).split()</span><br><span class="line">x0,y0,x1,y1 = int(a[<span class="number">0</span>]),int(a[<span class="number">1</span>]),int(a[<span class="number">2</span>]),int(a[<span class="number">3</span>])</span><br><span class="line">target = float(((y0-y1)**<span class="number">2</span>+(x0-x1)**<span class="number">2</span>)**<span class="number">0.5</span>)</span><br><span class="line">print(target)</span><br></pre></td></tr></table></figure><h2 id="2、提高题"><a href="#2、提高题" class="headerlink" title="2、提高题"></a>2、提高题</h2><blockquote><p>键盘输入小明学习的课程以及考试分数信息，信息之间采用空格分隔，每个课程一行，空格回车结束录入，示例格式如下：<br>数学 90<br>语文 95<br>英语 86<br>物理 84<br>生物 87<br>输出得分最高和最低的课程名称、考试分数，以及所有课程的平均分(保留2位小数)<br>格式如下：<br>最高分课程是语文 95，最低分课程是物理 84，平均分是88.4</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c_s_list = &#123;&#125;<span class="comment"># class &amp; score</span></span><br><span class="line">sum = <span class="number">0</span><span class="comment"># 均值</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">a = input(<span class="string">'input your class &amp;&amp; score:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="string">'esc'</span>:</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> c_s_list.items():</span><br><span class="line">print(key,value)</span><br><span class="line">sum += int(value)<span class="comment"># 均值</span></span><br><span class="line"></span><br><span class="line">max_min = sorted(c_s_list.items(),key=<span class="keyword">lambda</span> s:s[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n得分最高的课程名称:&#123;&#125;考试分数:&#123;&#125;'</span>.format(max_min[<span class="number">-1</span>][<span class="number">0</span>],max_min[<span class="number">-1</span>][<span class="number">1</span>]))</span><br><span class="line">print(<span class="string">'得分最低的课程名称:&#123;&#125;考试分数:&#123;&#125;'</span>.format(max_min[<span class="number">0</span>][<span class="number">0</span>],max_min[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">print(<span class="string">'均值:%.1f'</span>%(sum/len(c_s_list)))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">b = a.split()</span><br><span class="line">c_s_list[b[<span class="number">0</span>]] = b[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 每日一问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS模块实战-1-目录统计</title>
      <link href="/blog/2019/05/09/os-mo-kuai-shi-zhan-1/"/>
      <url>/blog/2019/05/09/os-mo-kuai-shi-zhan-1/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：OS模块实战-1-目录统计</p></blockquote><a id="more"></a><!-- <img src="/blog/2019/05/09/os-mo-kuai-shi-zhan-1/HeadPicture.jpg"> –&gt;<hr><h2 id="1、目录统计"><a href="#1、目录统计" class="headerlink" title="1、目录统计"></a>1、目录统计</h2><ul><li>指定一个路径，能计算出该目录的大小</li></ul><h2 id="2、Code"><a href="#2、Code" class="headerlink" title="2、Code"></a>2、Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,datetime</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_size</span><span class="params">(dir)</span>:</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    a = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dir,topdown =<span class="keyword">False</span>):</span><br><span class="line">        size += sum([os.path.getsize(os.path.join(root, name)) <span class="keyword">for</span> name <span class="keyword">in</span> files])</span><br><span class="line">    b = datetime.datetime.now()</span><br><span class="line">    print(<span class="string">'扫描时间为: &#123;&#125;s'</span>.format((b-a).seconds))</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 目录可自己指定</span></span><br><span class="line">size = get_dir_size(<span class="string">'D:/test/test'</span>)</span><br><span class="line"><span class="keyword">if</span> size/<span class="number">1024</span>/<span class="number">1024</span> &gt; <span class="number">1024</span>:</span><br><span class="line">print(<span class="string">'Total size is: %.3f Gb'</span>%(size/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'Total size is: %.3f Mb'</span>%(size/<span class="number">1024</span>/<span class="number">1024</span>))</span><br></pre></td></tr></table></figure><h2 id="3、补充"><a href="#3、补充" class="headerlink" title="3、补充"></a>3、补充</h2><ul><li>主要是<code>os.walk()</code></li></ul><h3 id="1、os-walk"><a href="#1、os-walk" class="headerlink" title="1、os.walk()"></a>1、os.walk()</h3><h4 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.walk(dir,topdown =<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># dir -- 目录</span></span><br><span class="line"><span class="comment"># topdown -- 可选.True，则优先遍历 top 目录，否则优先遍历 top 的子目录(默认为开启)。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os.walk()返回三元元组(root,dirs,files)</span></span><br><span class="line"><span class="comment"># 当前目录，当前目录的文件夹，当前目录的文件</span></span><br><span class="line"><span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(<span class="string">'.'</span>)</span><br><span class="line">print(root,dirs,files)</span><br><span class="line"><span class="comment"># 依次打印上述所说的</span></span><br><span class="line"><span class="comment"># 从而实现文件夹里的递归</span></span><br></pre></td></tr></table></figure><h4 id="2、性能比较"><a href="#2、性能比较" class="headerlink" title="2、性能比较"></a>2、性能比较</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">28936个文件和文件夹</span></span><br><span class="line"><span class="string">os.walk(dir,topdown =True) ——&gt; 7s ——&gt; 55.885GB</span></span><br><span class="line"><span class="string">os.walk(dir,topdown =True) ——&gt; 10次 ——&gt; 78.2s(整个程序运行时间)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">os.walk(dir,topdown =False) ——&gt; 5s ——&gt; 55.885GB</span></span><br><span class="line"><span class="string">os.walk(dir,topdown =False) ——&gt; 10次 ——&gt; 65.0s(整个程序运行时间)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模块之OS</title>
      <link href="/blog/2019/05/09/model-os/"/>
      <url>/blog/2019/05/09/model-os/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：os模块常用方法汇总</p></blockquote><a id="more"></a><img src="/blog/2019/05/09/model-os/HeadPicture.jpg"><hr><h2 id="os模块——操作系统的接口"><a href="#os模块——操作系统的接口" class="headerlink" title="os模块——操作系统的接口"></a>os模块——操作系统的接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">dir(os)</span><br></pre></td></tr></table></figure><h3 id="1、os-listdir-path-☆"><a href="#1、os-listdir-path-☆" class="headerlink" title="1、os.listdir(path)☆"></a>1、os.listdir(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果path=None,则返回当前目录下的文件夹和文件名字的列表;否则返回指定path的件夹和文件名字的列表</span></span><br><span class="line">os.listdir()</span><br><span class="line">os.listdir(path)</span><br></pre></td></tr></table></figure><h3 id="2、os-chdir-path-☆"><a href="#2、os-chdir-path-☆" class="headerlink" title="2、os.chdir(path)☆"></a>2、os.chdir(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到path</span></span><br><span class="line">os.chdir(path)</span><br></pre></td></tr></table></figure><h3 id="3、os-getcwd-☆"><a href="#3、os-getcwd-☆" class="headerlink" title="3、os.getcwd()☆"></a>3、os.getcwd()☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><h3 id="4、os-path-join-☆"><a href="#4、os-path-join-☆" class="headerlink" title="4、os.path.join()☆"></a>4、os.path.join()☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接路径</span></span><br><span class="line">path1 = <span class="string">'C:\\Users\\Hatsune Miku\\Deskto</span></span><br><span class="line"><span class="string">path2 = '</span>test1.py<span class="string">'</span></span><br><span class="line"><span class="string">os.path.join(path1,path2)</span></span><br><span class="line"><span class="string"># C:\\Users\\Hatsune Miku\\Desktop\\test1.py</span></span><br></pre></td></tr></table></figure><h3 id="5、os-path-exists-path-☆"><a href="#5、os-path-exists-path-☆" class="headerlink" title="5、os.path.exists(path)☆"></a>5、os.path.exists(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断路径是否存在,返回True或False</span></span><br><span class="line">os.path.exists(<span class="string">'.'</span>)</span><br><span class="line">os.path.exists(<span class="string">'.\\ssss'</span>)</span><br><span class="line"><span class="comment"># True False</span></span><br></pre></td></tr></table></figure><h3 id="6、os-path-abspath-path-☆"><a href="#6、os-path-abspath-path-☆" class="headerlink" title="6、os.path.abspath(path)☆"></a>6、os.path.abspath(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回path的绝对路径。</span></span><br><span class="line">os.path.abspath(<span class="string">'.'</span>) <span class="comment"># 返回当前目录</span></span><br><span class="line"><span class="comment"># C:\\Users\\Hatsune Miku\\Desktop</span></span><br><span class="line">os.path.abspath(<span class="string">'.\\1102'</span>)</span><br><span class="line"><span class="comment"># 'C:\\Users\\Hatsune Miku\\Desktop\\1102</span></span><br></pre></td></tr></table></figure><h3 id="7、os-path-split-path-☆"><a href="#7、os-path-split-path-☆" class="headerlink" title="7、os.path.split(path)☆"></a>7、os.path.split(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将路径分解为文件夹和文件名,返回的是元组</span></span><br><span class="line">os.path.split(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\test1.py'</span>)</span><br><span class="line"><span class="comment"># ('C:\\Users\\Hatsune Miku\\Desktop', 'test1.py')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅分离文件夹路径时需要注意的是,所以需要在文件夹后加上/</span></span><br><span class="line">os.path.split(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\'</span>)</span><br><span class="line">os.path.split(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop'</span>)</span><br><span class="line"><span class="comment"># ('C:\\Users\\Hatsune Miku\\Desktop', '')</span></span><br><span class="line"><span class="comment"># ('C:\\Users\\Hatsune Miku', 'Desktop')</span></span><br></pre></td></tr></table></figure><h3 id="8、os-path-dirname-path-☆"><a href="#8、os-path-dirname-path-☆" class="headerlink" title="8、os.path.dirname(path)☆"></a>8、os.path.dirname(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回path中的文件夹部分，结果不包含'\',返回的是str</span></span><br><span class="line">os.path.dirname(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\test1.py'</span>)</span><br><span class="line"><span class="comment"># C:\\Users\\Hatsune Miku\\Desktop</span></span><br></pre></td></tr></table></figure><h3 id="9、os-path-basename-path-☆"><a href="#9、os-path-basename-path-☆" class="headerlink" title="9、os.path.basename(path)☆"></a>9、os.path.basename(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回path中的文件名部分</span></span><br><span class="line">os.path.basename(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\test1.py'</span>)</span><br><span class="line"><span class="comment"># test1.py</span></span><br></pre></td></tr></table></figure><h3 id="10、os-path-getmtime-path"><a href="#10、os-path-getmtime-path" class="headerlink" title="10、os.path.getmtime(path)"></a>10、os.path.getmtime(path)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件夹或文件的最后修改时间，返回的是从新纪元到访问时的秒数</span></span><br><span class="line">os.path.getmtime(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\test1.py'</span>)</span><br><span class="line"><span class="comment"># 1556017564.1900363</span></span><br></pre></td></tr></table></figure><h3 id="11、os-path-getatime-path"><a href="#11、os-path-getatime-path" class="headerlink" title="11、os.path.getatime(path)"></a>11、os.path.getatime(path)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件夹或文件的最后访问时间</span></span><br><span class="line">os.path.getmtime(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\test1.py'</span>)</span><br><span class="line"><span class="comment"># 1555867584.470328</span></span><br></pre></td></tr></table></figure><h3 id="12、os-path-getacime-path"><a href="#12、os-path-getacime-path" class="headerlink" title="12、os.path.getacime(path)"></a>12、os.path.getacime(path)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件夹或文件的创建时间</span></span><br><span class="line">os.path.getatime(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\test1.py'</span>)</span><br><span class="line"><span class="comment"># 1555867584.470328</span></span><br></pre></td></tr></table></figure><h3 id="13、os-path-getsize-path-☆"><a href="#13、os-path-getsize-path-☆" class="headerlink" title="13、os.path.getsize(path)☆"></a>13、os.path.getsize(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件夹或文件的大小，若是文件夹返回0,是文件则返回字节数</span></span><br><span class="line">os.path.getsize(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\test1.py'</span>)</span><br><span class="line"><span class="comment"># 2419</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 46.6M的文件,字节数为48877195</span></span><br><span class="line">print(<span class="number">48877195</span>/float(<span class="number">1024</span>*<span class="number">1024</span>))</span><br><span class="line">print(<span class="string">'%.2f'</span>%(<span class="number">48877195</span>/float(<span class="number">1024</span>*<span class="number">1024</span>)))</span><br><span class="line"><span class="comment"># 46.61292552947998</span></span><br><span class="line"><span class="comment"># 46.61</span></span><br></pre></td></tr></table></figure><h3 id="14、os-makedirs-☆"><a href="#14、os-makedirs-☆" class="headerlink" title="14、os.makedirs()☆"></a>14、os.makedirs()☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">os.makedirs(<span class="string">'C:\\Users\\Hatsune Miku\\Desktop\\testtesttest'</span>)</span><br></pre></td></tr></table></figure><h3 id="15、os-system"><a href="#15、os-system" class="headerlink" title="15、os.system()"></a>15、os.system()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行sheel命令,无返回值</span></span><br><span class="line">os.system(<span class="string">'ipconfig'</span>)</span><br><span class="line">a = os.system(<span class="string">'ipconfig'</span>)</span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure><h3 id="16、os-popen"><a href="#16、os-popen" class="headerlink" title="16、os.popen()"></a>16、os.popen()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行命令并把 执行的cmd的输出结果 返回</span></span><br><span class="line"><span class="comment"># os.popen(cmd,mode,bufsize) 命令,权限,需要的缓冲大小</span></span><br><span class="line">a = os.popen(<span class="string">'ipconfig'</span>)</span><br><span class="line">a.read()</span><br><span class="line"><span class="comment"># a 返回一个文件描述符号为fd的打开的文件对象</span></span><br><span class="line"><span class="comment"># a.read()是字符串</span></span><br></pre></td></tr></table></figure><h3 id="17、os-remove-path-☆"><a href="#17、os-remove-path-☆" class="headerlink" title="17、os.remove(path)☆"></a>17、os.remove(path)☆</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除文件路径</span></span><br><span class="line">os.remove(path)</span><br></pre></td></tr></table></figure><h3 id="18、os-rename-src-dst"><a href="#18、os-rename-src-dst" class="headerlink" title="18、os.rename(src,dst)"></a>18、os.rename(src,dst)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件或目录src重命名为dst</span></span><br><span class="line"><span class="comment"># 将'tess1'文件夹重命名为'test2'</span></span><br></pre></td></tr></table></figure><h3 id="19、os-getenv"><a href="#19、os-getenv" class="headerlink" title="19、os.getenv()"></a>19、os.getenv()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得环境变量</span></span><br><span class="line">os.getenv(<span class="string">'path'</span>)</span><br></pre></td></tr></table></figure><h3 id="20、os-walk"><a href="#20、os-walk" class="headerlink" title="20、os.walk()"></a>20、os.walk()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># os.walK()是一个简单易用的目录遍历器,用于在目录树中游走输出在目录中的文件名</span></span><br><span class="line"><span class="comment"># 返回的是一个三元元组,(root,dirs,files)</span></span><br><span class="line"><span class="comment"># root 当前遍历的目录路径</span></span><br><span class="line"><span class="comment"># dirs 当前目录下的文件夹(列表)</span></span><br><span class="line"><span class="comment"># files 当前目录下的文件(列表)</span></span><br><span class="line"><span class="comment"># .代表当前目录路径</span></span><br><span class="line"><span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(<span class="string">'.'</span>):</span><br><span class="line">    print(root)</span><br><span class="line">    print(dirs)</span><br><span class="line">    print(files)</span><br><span class="line">    <span class="comment"># 先返回当前目录的三元元组,再返回子目录的,有子子目录则亦然</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算一个文件夹的大小 ↓</span></span><br><span class="line">    <span class="comment"># 首先遍历当前目录然后是子目录</span></span><br><span class="line">    <span class="comment"># 遍历目录时可以先通过os.path.join拼接路径,用os.path.getsize()获得文件的大小,使用遍历则获得一个文件夹下的所有文件的大小——&gt;即这个文件夹的大小</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 1.</span></span><br><span class="line">size = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        size += os.path.getsize(os.path.join(root, name))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 2.</span></span><br><span class="line">size = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">    size += sum([os.path.getsize(os.path.join(root, name)) <span class="keyword">for</span> name <span class="keyword">in</span> files])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Others-你相信这个世界能加速吗？</title>
      <link href="/blog/2019/04/25/rang-xia-zai-su-du-de-dao-jie-fang/"/>
      <url>/blog/2019/04/25/rang-xia-zai-su-du-de-dao-jie-fang/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：重新整理了一下关于度盘的黑科技</p></blockquote><a id="more"></a><img src="/blog/2019/04/25/rang-xia-zai-su-du-de-dao-jie-fang/HeadPicture.jpg"><hr><blockquote><ul><li>整理的时候发现 度盘下载器 的作者不维护了╮(╯▽╰)╭，今天也换了多个文件试了下貌似都是HTTP响应超时字样，详见<a href="https://www.linesoft.top/archives/4/" target="_blank" rel="noopener">https://www.linesoft.top/archives/4/</a></li><li>毕竟也是陪伴多年的好朋友，献上一朵❀❀(<del>绝对不是因为其他3作更好用一点的原因</del>)</li><li>那么以下3作推荐给大家</li></ul></blockquote><h2 id="加速世界——你相信这个世界能加速吗？"><a href="#加速世界——你相信这个世界能加速吗？" class="headerlink" title="加速世界——你相信这个世界能加速吗？"></a>加速世界——你相信这个世界能加速吗？</h2><div class="tabs" id="加速通道"><ul class="nav-tabs"><li class="tab active"><a href="#加速通道-1">加速通道 1</a></li><li class="tab"><a href="#加速通道-2">加速通道 2</a></li><li class="tab"><a href="#加速通道-3">加速通道 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="加速通道-1"><p><code>proxyee-down</code></p><blockquote><p><strong>简介</strong>：Proxyee Down 是一款开源的免费 HTTP 高速下载器，底层使用<code>netty</code>开发，支持自定义 HTTP 请求下载且支持扩展功能，可以通过安装扩展实现特殊的下载需求。<a href="https://github.com/proxyee-down-org/proxyee-down/wiki/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">使用手册</a></p><p><strong>预览</strong>：<img src="/blog/2019/04/25/rang-xia-zai-su-du-de-dao-jie-fang/1.png"></p><p><strong>github地址</strong>：<a href="https://github.com/proxyee-down-org/proxyee-down" target="_blank" rel="noopener">github</a></p><p><strong>直接下载地址</strong>(建议看一遍使用手册)：<a href="https://imhx-my.sharepoint.com/personal/pd_imhx_onmicrosoft_com/Documents/Forms/All.aspx?cid=f01b3c20%2D2c30%2D48a8%2D87c5%2Dc938ea52de3f&amp;FolderCTID=0x012000536DC31294EC264084FE880734F95AEA&amp;id=%2Fpersonal%2Fpd%5Fimhx%5Fonmicrosoft%5Fcom%2FDocuments%2Fproxyee%2Ddown%2F3%2E4" target="_blank" rel="noopener">地址</a></p></blockquote></div><div class="tab-pane" id="加速通道-2"><p><code>PanDownload</code></p><blockquote><p><strong>简介</strong>：百度盘第三方下载工具</p><p><strong>预览</strong>：<img src="/blog/2019/04/25/rang-xia-zai-su-du-de-dao-jie-fang/2.png"></p><p><strong>地址</strong>：<a href="https://www.lanzous.com/b667103/" target="_blank" rel="noopener">PanDownload</a>    <strong>密码</strong>：co50</p></blockquote></div><div class="tab-pane" id="加速通道-3"><p><code>SpeedPan</code></p><blockquote><p> <strong>简介</strong>：SpeedPan又名速盘，一款百度网盘满速下载工具利器</p><p><strong>预览</strong>：<img src="/blog/2019/04/25/rang-xia-zai-su-du-de-dao-jie-fang/3.png"></p><p><strong>地址</strong>：<a href="https://www.lanzous.com/b667111/" target="_blank" rel="noopener">SpeedPan</a>        <strong>密码</strong>：7rn6</p></blockquote></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件分享 </tag>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Mysql基本使用</title>
      <link href="/blog/2019/04/22/py-mysql/"/>
      <url>/blog/2019/04/22/py-mysql/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：记录python——mysql的一些操作</p></blockquote><a id="more"></a><img src="/blog/2019/04/22/py-mysql/HeadPicture.jpg"><hr><h2 id="1、MySQLdb"><a href="#1、MySQLdb" class="headerlink" title="1、MySQLdb"></a>1、MySQLdb</h2><p><code>python</code>连接<code>mysql</code>用的模块。<code>MySQLdb</code>主要还是聚焦于如何和数据库进行连接和进行基本的操作，操作的体现形式主要还是进行<code>SQL</code>语句的执行。</p><ul><li>安装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install mysqlclient</span><br></pre></td></tr></table></figure><h2 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h2><h3 id="1、数据库连接"><a href="#1、数据库连接" class="headerlink" title="1、数据库连接"></a>1、数据库连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="comment"># 连接数据库 ——&gt; 主机host,端口,用户,密码,数据库,编码</span></span><br><span class="line">conn = MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,user=<span class="string">'你的账号'</span>,passwd=<span class="string">'你的密码'</span>,db=<span class="string">'你要操作的数据库'</span>,charset=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="comment"># 连接成功后,创建一个游标对象用于操作数据库</span></span><br><span class="line"><span class="comment"># 获取到游标后再进行数据库操作</span></span><br><span class="line">cur = conn.cursor()</span><br></pre></td></tr></table></figure><h3 id="2、查询"><a href="#2、查询" class="headerlink" title="2、查询"></a>2、查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询</span></span><br><span class="line">cur.execute(<span class="string">"SELECT VERSION()"</span>) <span class="comment"># 这里不返回结果，只是执行</span></span><br><span class="line">version = cur.fetchall()</span><br><span class="line"><span class="comment"># 返回的是元组 (('5.7.14',),)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fetchall() 是返回所有匹配的元组,接收全部的返回结果行</span></span><br><span class="line"><span class="comment"># fetchone() 只返回一个匹配的元组,然后游标后移</span></span><br><span class="line"><span class="comment"># 我这里用了自己数据库中的一个表演示fetchall()和fetchone()</span></span><br><span class="line"><span class="comment"># 1. fetchall()</span></span><br><span class="line">cur.execute(<span class="string">"SELECT * from test"</span>)</span><br><span class="line">a = cur.fetchall()</span><br><span class="line">print(a,len(a))</span><br><span class="line"><span class="comment"># 这里数据量太大,结果就不放出来了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. fetchone()</span></span><br><span class="line">cur.execute(<span class="string">"SELECT * from test"</span>)</span><br><span class="line">data = cur.fetchone()</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">    print(data)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    data = cur.fetchone()</span><br></pre></td></tr></table></figure><blockquote><p> 附图</p></blockquote><p><img src="/blog/blog/2019/04/22/py-mysql/blog\blog\source\_posts\2019-04-22-py-mysql\1.png" alt="fetchone()"></p><h3 id="3、插入"><a href="#3、插入" class="headerlink" title="3、插入"></a>3、插入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入</span></span><br><span class="line"><span class="comment"># sql语句,%s占位</span></span><br><span class="line">sql = <span class="string">"INSERT INTO test(date,tag,title,link) VALUES(%s,%s,%s,%s)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 插入一条execute() data是元组</span></span><br><span class="line">data = (<span class="string">'19/02/14'</span>, <span class="string">'Android'</span>, <span class="string">'Android\xa0fdget()\xa0优化导致的\xa0binder\xa0UAF\xa0漏洞（CVE-2019-2000）\xa0：'</span>, <span class="string">'https://bugs.chromium.org/p/project-zero/issues/detail?id=1719'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql,data)</span><br><span class="line">    <span class="comment"># 事务commit后才会真正插入数据</span></span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="comment"># 出错回滚</span></span><br><span class="line">    conn.rollback()</span><br><span class="line"><span class="keyword">finally</span>：</span><br><span class="line">cur.close()</span><br><span class="line">conn.close() <span class="comment"># 断开数据库连接</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. 批量插入executemany()</span></span><br><span class="line">datas = [(<span class="string">'19/02/14'</span>, <span class="string">'Android'</span>, <span class="string">'Android\xa0fdget()\xa0优化导致的\xa0binder\xa0UAF\xa0漏洞（CVE-2019-2000）\xa0：'</span>, <span class="string">'https://bugs.chromium.org/p/project-zero/issues/detail?id=1719'</span>),(<span class="string">'19/02/14'</span>, <span class="string">'IoTDevice'</span>, <span class="string">'以家庭路由为例讲解 IoT 逆向工程：'</span>, <span class="string">'http://va.ler.io/myfiles/dva/iot-rev-engineering.pdf'</span>)]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.executemany(sql,datas)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span> Exception,e:</span><br><span class="line">    <span class="comment"># 出错回滚</span></span><br><span class="line">    conn.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close() <span class="comment"># 断开数据库连接</span></span><br></pre></td></tr></table></figure><h3 id="4、修改，更新"><a href="#4、修改，更新" class="headerlink" title="4、修改，更新"></a>4、修改，更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sql</span></span><br><span class="line">sql = <span class="string">"UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'"</span> % (<span class="string">'M'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h3 id="5、删除"><a href="#5、删除" class="headerlink" title="5、删除"></a>5、删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sql 删除数据,年龄大于20</span></span><br><span class="line">sql = <span class="string">"DELETE FROM EMPLOYEE WHERE AGE &gt; %s"</span> % (<span class="number">20</span>)</span><br><span class="line"><span class="keyword">try</span>：</span><br><span class="line">cur.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">conn.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫/GUI编程之签名生成器</title>
      <link href="/blog/2019/04/19/signature-generator/"/>
      <url>/blog/2019/04/19/signature-generator/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p> 本篇概述：主要记录爬虫+GUI制作签名生成器</p></blockquote><a id="more"></a><img src="/blog/2019/04/19/signature-generator/HeadPicture.png"><hr><h2 id="1、爬虫实现"><a href="#1、爬虫实现" class="headerlink" title="1、爬虫实现"></a>1、爬虫实现</h2><ul><li>暂时留空，本篇先解析代码</li></ul><hr><h2 id="2、GUI实现"><a href="#2、GUI实现" class="headerlink" title="2、GUI实现"></a>2、GUI实现</h2><ul><li>暂时留空，本篇先解析代码</li></ul><hr><h2 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h2><p>github地址：<a href="https://github.com/Coder-Sakura/Signature-generator" target="_blank" rel="noopener">https://github.com/Coder-Sakura/Signature-generator</a></p><h3 id="1-uustv-py-——-gt-爬虫模块"><a href="#1-uustv-py-——-gt-爬虫模块" class="headerlink" title="1. uustv.py ——&gt; 爬虫模块"></a>1. uustv.py ——&gt; 爬虫模块</h3><div><div class="fold_hider"><div class="close hider_title"><u>点我可以将内容伸缩哦~</u></div></div><div class="fold"><p>٩(๑&gt;◡&lt;๑)۶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *<span class="comment"># PhotoImage</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化,包括请求头,url,支持的字体、字号,需要生成签名的文字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">self.url = <span class="string">'http://m.uustv.com/'</span></span><br><span class="line">self.values = [<span class="string">'个性签'</span>,<span class="string">'连笔签'</span>,<span class="string">'潇洒签'</span>,<span class="string">'草体签'</span>,<span class="string">'合体签'</span>,<span class="string">'商务签'</span>,<span class="string">'可爱签'</span>]</span><br><span class="line">self.font = [<span class="string">'jfcs.ttf'</span>,<span class="string">'qmt.ttf'</span>,<span class="string">'bzcs.ttf'</span>,<span class="string">'lfc.ttf'</span>,<span class="string">'haku.ttf'</span>,<span class="string">'zql.ttf'</span>,<span class="string">'yqk.ttf'</span>]</span><br><span class="line">self.v_f = dict(zip(self.values,self.font))</span><br><span class="line">self.word = <span class="string">''</span></span><br><span class="line">self.fonts = <span class="string">''</span></span><br><span class="line">self.size = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受GUI页面传来的参数,首先检查是否为空,其次是选择的字体大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self,part,enter,numberChosen,sizesChosen)</span>:</span></span><br><span class="line">self.part = part</span><br><span class="line">self.word = enter.get()</span><br><span class="line">self.fonts = numberChosen.get()<span class="comment"># 文字</span></span><br><span class="line">self.size = sizesChosen.get()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> enter.get():</span><br><span class="line">messagebox.showinfo(<span class="string">'提示'</span>,<span class="string">'请输入需要生成签名的文字'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> self.fonts <span class="keyword">in</span> self.v_f:</span><br><span class="line">self.fonts = self.v_f[self.fonts]<span class="comment"># 文字转换成字体格式名称</span></span><br><span class="line"><span class="comment"># messagebox.showinfo('提示',word)</span></span><br><span class="line"><span class="comment"># messagebox.showinfo('提示',fonts)</span></span><br><span class="line">self.post_img()</span><br><span class="line"><span class="comment"># 发送请求,获取图片地址,并捕获图片数据返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_img</span><span class="params">(self)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'word'</span>: self.word,</span><br><span class="line"><span class="string">'sizes'</span>: self.size,</span><br><span class="line"><span class="string">'fonts'</span>: self.fonts,</span><br><span class="line"><span class="string">'fontcolor'</span>: <span class="string">'#000000'</span>&#125;</span><br><span class="line">html = requests.post(url=self.url,data=data,headers=self.headers)</span><br><span class="line">html_soup = BeautifulSoup(html.text,<span class="string">'lxml'</span>)</span><br><span class="line">img_url = self.url + html_soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'tu'</span>&#125;).find(<span class="string">'img'</span>)[<span class="string">'src'</span>] </span><br><span class="line">print(img_url)</span><br><span class="line">img_html = requests.get(url=img_url,headers=self.headers)</span><br><span class="line">img_html.encoding = <span class="string">'utf8'</span></span><br><span class="line">self.down(img_html)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down</span><span class="params">(self,img_html)</span>:</span></span><br><span class="line">f = open(<span class="string">'&#123;&#125;.gif'</span>.format(self.word),<span class="string">'wb'</span>)</span><br><span class="line">f.write(img_html.content)</span><br><span class="line">f.close()</span><br><span class="line">self.view_img()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图片展示到GUI页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_img</span><span class="params">(self)</span>:</span></span><br><span class="line">image = PhotoImage(file=<span class="string">'&#123;&#125;.gif'</span>.format(self.word))</span><br><span class="line">label2 = Label(self.part,image=image)</span><br><span class="line">label2.bm = image</span><br><span class="line">label2.grid(row=<span class="number">3</span>,columnspan=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div></div><h3 id="2-uustv-gui-py"><a href="#2-uustv-gui-py" class="headerlink" title="2. uustv_gui.py"></a>2. uustv_gui.py</h3><div><div class="fold_hider"><div class="close hider_title"><u>点我可以将内容伸缩哦~</u></div></div><div class="fold"><p>٩(๑&gt;◡&lt;๑)۶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.ttk <span class="keyword">import</span> Combobox</span><br><span class="line"><span class="keyword">from</span> uustv <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GUI</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.window_title = <span class="string">'签名生成器--网络精英--2019.04.12'</span></span><br><span class="line">self.label_text = <span class="string">'输入签名字样'</span></span><br><span class="line">self.button_text = <span class="string">'点击生成'</span></span><br><span class="line">self.values = [<span class="string">'个性签'</span>,<span class="string">'连笔签'</span>,<span class="string">'潇洒签'</span>,<span class="string">'草体签'</span>,<span class="string">'合体签'</span>,<span class="string">'商务签'</span>,<span class="string">'可爱签'</span>]</span><br><span class="line">self.sizes = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># GUI</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parts</span><span class="params">(self)</span>:</span><span class="comment"># 部件</span></span><br><span class="line">part = Tk()<span class="comment"># 封装对象</span></span><br><span class="line">part.title(self.window_title)<span class="comment"># 标题</span></span><br><span class="line">part.geometry(<span class="string">'545x330'</span>)<span class="comment"># 窗口大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义label,文字区域,只能看不能点,设置文字，文字字体和文字大小</span></span><br><span class="line">label1 = Label(part,text=<span class="string">'设计字样'</span>,font=(<span class="string">'华文行楷'</span>,<span class="number">20</span>))</span><br><span class="line">label1.grid()<span class="comment"># 定义布局格式，grid()表示网格格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入框</span></span><br><span class="line">enter = Entry(part,font=(<span class="string">'微软雅黑'</span>,<span class="number">20</span>))</span><br><span class="line">enter.grid(row=<span class="number">0</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字体样式选择</span></span><br><span class="line">numberChosen = Combobox(part, width=<span class="number">12</span>, state=<span class="string">'readonly'</span>)</span><br><span class="line">numberChosen[<span class="string">'values'</span>] = self.values</span><br><span class="line">numberChosen.current(<span class="number">0</span>)</span><br><span class="line">numberChosen.grid(row=<span class="number">1</span>,column=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字体大小选择</span></span><br><span class="line">sizesChosen = Combobox(part, width=<span class="number">12</span>, state=<span class="string">'readonly'</span>)</span><br><span class="line">sizesChosen[<span class="string">'values'</span>] = self.sizes</span><br><span class="line">sizesChosen.current(<span class="number">5</span>)</span><br><span class="line">sizesChosen.grid(row=<span class="number">1</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按钮,当按下按钮时,携带参数至指定函数</span></span><br><span class="line">button = Button(part,text=<span class="string">'点击生成'</span>,font=(<span class="string">'微软雅黑'</span>,<span class="number">20</span>),command=<span class="keyword">lambda</span>: Spider().check(part,enter,numberChosen,sizesChosen))</span><br><span class="line">button.grid(row=<span class="number">2</span>,column=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">part.mainloop()</span><br><span class="line">gui = GUI()</span><br><span class="line">gui.parts()</span><br></pre></td></tr></table></figure></div></div><h3 id="3-生成软件"><a href="#3-生成软件" class="headerlink" title="3. 生成软件"></a>3. 生成软件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先安装pyinstaller</span></span><br><span class="line">pip3 install pyinstaller</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.在2个py的所在目录调出cmd，输入以下命令:</span></span><br><span class="line">pyinstaller -F -w uustv.py uustv_gui.py</span><br><span class="line"><span class="comment"># 在生成的文件夹中找到dict文件夹,其下有exe文件,便是最终的签名生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.如果需要自定义软件图标,需要自己准备好适当尺寸的ico格式图片</span></span><br><span class="line"><span class="comment"># 打包的时候使用-i xxx.ico 来指定自定义的ico图标</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫-pixiv关注画师作品[2]</title>
      <link href="/blog/2019/03/30/pixiv-two/"/>
      <url>/blog/2019/03/30/pixiv-two/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：<a href="https://coder-sakura.github.io/blog/2019/03/27/pixiv-one/">上篇</a>的后续；主要是分析数据接口，拿到关注画师的所有作品的详细信息</p></blockquote><a id="more"></a><img src="/blog/2019/03/30/pixiv-two/HeadPicture.jpg"><hr><h2 id="1、分析——关注界面"><a href="#1、分析——关注界面" class="headerlink" title="1、分析——关注界面"></a>1、分析——关注界面</h2><blockquote><p>关注界面(默认公开) <a href="https://www.pixiv.net/bookmark.php?type=user&amp;rest=show" target="_blank" rel="noopener">https://www.pixiv.net/bookmark.php?type=user&amp;rest=show</a> </p></blockquote><img src="/blog/2019/03/30/pixiv-two/1.png"><blockquote><p>这里关注画师全在公开界面，虽然非公开获取也是ok的</p><p>公开和非公开只是，<a href="https://www.pixiv.net/bookmark.php?type=user&amp;rest=show" target="_blank" rel="noopener">https://www.pixiv.net/bookmark.php?type=user&amp;rest=show</a> 后面分别是rest=show 和 rest=hide</p></blockquote><hr><blockquote><p>F12 查看 Elements ，寻找画师列表和页数</p><ol><li>画师列表全在一个 class=members 的 div 中</li><li>画师信息在user-data中，有作者 id、主页 url、作者 name</li></ol></blockquote><img src="/blog/2019/03/30/pixiv-two/2.png"><img src="/blog/2019/03/30/pixiv-two/4.png"><blockquote><ol start="3"><li>最大页数在一个 class=_pager-complex 的 div，倒数第二个li</li></ol></blockquote><img src="/blog/2019/03/30/pixiv-two/3.png"><hr><h2 id="2、代码——bs4匹配"><a href="#2、代码——bs4匹配" class="headerlink" title="2、代码——bs4匹配"></a>2、代码——bs4匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到最大页数</span></span><br><span class="line">max_num = attention_html_soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'_pager-complex'</span>&#125;).find_all(<span class="string">'li'</span>)[<span class="number">-2</span>].text</span><br><span class="line"><span class="comment"># 画师个人信息</span></span><br><span class="line">painter_information = attention_html_soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'members'</span>&#125;).find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'userdata'</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="3、代码——获取关注画师的信息"><a href="#3、代码——获取关注画师的信息" class="headerlink" title="3、代码——获取关注画师的信息"></a>3、代码——获取关注画师的信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取关注画师界面的信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attention_html</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># self.return_to = 'https://www.pixiv.net/bookmark.php?type=user&amp;rest=show&amp;p='</span></span><br><span class="line">    <span class="comment"># p 是页数</span></span><br><span class="line">    attention_html = self.request(self.return_to)</span><br><span class="line">    attention_html_soup = BeautifulSoup(attention_html.text, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment">#获取最大页数</span></span><br><span class="line">    max_num = attention_html_soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'_pager-complex'</span>&#125;).find_all(<span class="string">'li'</span>)[<span class="number">-2</span>].text</span><br><span class="line">    print(<span class="string">'最大页数为%s'</span> % (max_num))</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,int(max_num)+<span class="number">1</span>):</span><br><span class="line">        attention_html_url = self.return_to + str(num)      <span class="comment"># 构造每个页面的 url</span></span><br><span class="line">        attention_html = self.request(attention_html_url)</span><br><span class="line">        attention_html_soup = BeautifulSoup(attention_html.text,<span class="string">'lxml'</span>)</span><br><span class="line">        painter_information = attention_html_soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'members'</span>&#125;).find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'userdata'</span>&#125;)  <span class="comment">#画师个人信息</span></span><br><span class="line">        <span class="keyword">for</span> painter <span class="keyword">in</span> painter_information:</span><br><span class="line">            <span class="comment"># userdata下的a标签中的data-user_id = 作者id</span></span><br><span class="line">            painter_id = painter.a[<span class="string">'data-user_id'</span>]</span><br><span class="line">            <span class="comment"># userdata下的a标签中的data-user_name = 作者name</span></span><br><span class="line">            name = painter.a[<span class="string">'data-user_name'</span>]</span><br><span class="line">            print(<span class="string">'&#123;0&#125;:&#123;1&#125;'</span>.format(name,painter_id))</span><br><span class="line">    print(<span class="string">'已获取所有关注画师的作品信息！！！！'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>对于文笔不好的人来说，还是上代码来的舒服</p><p>毕竟 talk is cheap, show me code !</p></blockquote><hr><h2 id="4、分析——画师个人主页及数据流向"><a href="#4、分析——画师个人主页及数据流向" class="headerlink" title="4、分析——画师个人主页及数据流向"></a>4、分析——画师个人主页及数据流向</h2><blockquote><ol><li>这里说下，为什么不获取 user-data 里面的 href 属性？</li><li>正常流程不应该是拿到 href 然后访问 url，获取源码，然后拿到作品信息。</li><li>原因是：这里用的是Ajax请求，所以源码中并没有我们想要的数据</li><li>我们可以直接通过接口拿到这个画师的所有作品的数据。</li></ol></blockquote><hr><img src="/blog/2019/03/30/pixiv-two/5.png"><blockquote><p>该画师有73个作品，但是点击进入主页发现只有小小的一部分</p><p>勾上 Preserve log，点击查看全部</p></blockquote><img src="/blog/2019/03/30/pixiv-two/6.png"><blockquote><p>新加载的页面显示了所有的作品（虽然分为2页）</p><p>与之前的 XHR 比较，接下来的目标在红框标出来的三个文件（不一定全是我们的目标）</p></blockquote><hr><blockquote><p>点击第一个illust，发现 Preview 里是标签 tags （json数据）</p></blockquote><img src="/blog/2019/03/30/pixiv-two/7.png"><blockquote><p>点击第二个illust，Preview  里是作品信息 （json数据）</p></blockquote><img src="/blog/2019/03/30/pixiv-two/8.png"><blockquote><p>确定了第二个 illust 是目标之后，模仿它进行请求</p><p>但是发现他的 url 是一串巨长的字符串，由 一页的所有作品 id 和 is_manga_top=0 拼接而成</p><p>url 中作品 id 的拼接顺序是由新到旧（也就是数字大的在前面）</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">url</span> = https://www.pixiv.net/ajax/user/1117751/profile/illusts?ids<span class="number">%5</span>B<span class="number">%5</span>D=73742388&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=71855085&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=71849582&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=71685985&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=68213121&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=67765964&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=67758280&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=67757922&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=67619936&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=67404010&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=66856979&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=65998170&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=65834643&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=65393332&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=63861794&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=63761535&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=63617575&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=63475838&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=63090307&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=62347061&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=62200016&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=62178209&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=61785521&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=61656195&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=61489588&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=60732958&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=60588424&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=60384884&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=59959669&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=59706889&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=59656129&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=59541311&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=59180046&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=58977788&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=58919004&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=58029173&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=57027442&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=57027347&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=56527887&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=56525716&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=56309403&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=56110382&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=55934890&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=55680445&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=54917440&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=54900477&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=54900429&amp;ids<span class="number">%5</span>B<span class="number">%5</span>D=54900380&amp;is_manga_top=0</span><br></pre></td></tr></table></figure><blockquote><p>下一步目标：既然有所有作品 id 拼接成的 id ，说明是有接口获取所有作品 id 的。</p></blockquote><hr><h2 id="5、模仿请求"><a href="#5、模仿请求" class="headerlink" title="5、模仿请求"></a>5、模仿请求</h2><blockquote><p>在 XHR 中继续寻找，发现一个叫 all 文件，点开 Preview （json数据）</p><p>all 的 Request URL: <a href="https://www.pixiv.net/ajax/user/1117751/profile/all" target="_blank" rel="noopener">https://www.pixiv.net/ajax/user/1117751/profile/all</a> ，/user/后面的数字是作者的 id</p><p>在 Preview 中发现 illusts (插画)属性 ，下面的应该就是作品 id 了，可以自己复制一个去验证一下。</p><p>补充：有些画师在 manga (漫画)属性也是有值的，所以这里需要和前面的 illusts 属性合并</p></blockquote><img src="/blog/2019/03/30/pixiv-two/9.png"><blockquote><p>Request URL 放到浏览器中去访问，将访问结果复制到 json.cn 进行格式化</p></blockquote><img src="/blog/2019/03/30/pixiv-two/10.png"><h2 id="6、代码——获取关注画师的所有作品信息"><a href="#6、代码——获取关注画师的所有作品信息" class="headerlink" title="6、代码——获取关注画师的所有作品信息"></a>6、代码——获取关注画师的所有作品信息</h2><blockquote><ol><li>获得关注画师的信息，比如 id、name</li><li>通过 <a href="https://www.pixiv.net/ajax/user/[画师id]/profile/all" target="_blank" rel="noopener">https://www.pixiv.net/ajax/user/[画师id]/profile/all</a> 来获取画师的所有作品 id</li><li>（单图 动图 多图 都在 illusts 属性中，漫画虽然是单图和多图，但在 manga属性 中）</li><li>接着通过构造作品 id 和 is_manga_top=0 的 url 去请求作品的详细信息</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取关注画师界面的信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attention_html</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># self.return_to = 'https://www.pixiv.net/bookmark.php?type=user&amp;rest=show&amp;p='</span></span><br><span class="line">    <span class="comment"># p 是页数</span></span><br><span class="line">    attention_html = self.request(self.return_to)</span><br><span class="line">    attention_html_soup = BeautifulSoup(attention_html.text, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 获取最大页数</span></span><br><span class="line">    max_num = attention_html_soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'_pager-complex'</span>&#125;).find_all(<span class="string">'li'</span>)[<span class="number">-2</span>].text</span><br><span class="line">    print(<span class="string">'最大页数为%s'</span> % (max_num))</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,int(max_num)+<span class="number">1</span>):</span><br><span class="line">        attention_html_url = self.return_to + str(num)      <span class="comment"># 构造每个页面的 url</span></span><br><span class="line">        attention_html = self.request(attention_html_url)</span><br><span class="line">        attention_html_soup = BeautifulSoup(attention_html.text,<span class="string">'lxml'</span>)</span><br><span class="line">        painter_information = attention_html_soup.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'members'</span>&#125;).find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>, <span class="string">'userdata'</span>&#125;)  <span class="comment">#画师个人信息</span></span><br><span class="line">        <span class="keyword">for</span> painter <span class="keyword">in</span> painter_information:</span><br><span class="line">            <span class="comment"># userdata下的a标签中的data-user_id = 作者id</span></span><br><span class="line">            painter_id = painter.a[<span class="string">'data-user_id'</span>]</span><br><span class="line">            <span class="comment"># userdata下的a标签中的data-user_name = 作者name</span></span><br><span class="line">            name = painter.a[<span class="string">'data-user_name'</span>]</span><br><span class="line">            print(<span class="string">'&#123;0&#125;:&#123;1&#125;'</span>.format(name,painter_id))</span><br><span class="line">            <span class="comment"># 构造url来获取作者的所有作品 id</span></span><br><span class="line">            ajax_url = <span class="string">'https://www.pixiv.net/ajax/user/&#123;0&#125;/profile/all'</span>.format(painter_id)</span><br><span class="line">            self.painter_picture(painter_id,ajax_url,name)</span><br><span class="line">    print(<span class="string">'获取所有关注画师信息完成！！！！'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 painter_picture() 应在 attention_html() 的 painter_information 循环中</span></span><br><span class="line"><span class="comment"># self.painter_picture(painter_id,ajax_url,name)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">painter_picture</span><span class="params">(self,painter_id,ajax_url,name)</span>:</span></span><br><span class="line">    ajax_html = self.request(ajax_url)</span><br><span class="line">    <span class="comment"># 使用json.loads()方法加载进来</span></span><br><span class="line">    ajax_json = json.loads(ajax_html.text)</span><br><span class="line">    ajax_illusts = ajax_json[<span class="string">"body"</span>][<span class="string">"illusts"</span>] </span><br><span class="line">    ajax_manga = ajax_json[<span class="string">"body"</span>][<span class="string">"manga"</span>]</span><br><span class="line">    <span class="comment"># 判断是否有 manga 类型的作品</span></span><br><span class="line">    <span class="keyword">if</span> len(ajax_manga) == <span class="number">0</span>:</span><br><span class="line">        total_data_dict = dict(ajax_illusts)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 合并 manga 和 illusts,并转换为字典</span></span><br><span class="line">        total_data_dict = dict(ajax_illusts, **ajax_manga)</span><br><span class="line">    <span class="comment"># 字典格式：id:None,所以取字典的keys，并转化为list</span></span><br><span class="line">    total_data = list(total_data_dict.keys())</span><br><span class="line">    <span class="comment"># 这里为什么要排序呢？</span></span><br><span class="line">    <span class="comment"># 返回的json里id是从小到大,我们只要[::-1]反转,不就大到小了吗？</span></span><br><span class="line">    <span class="comment"># 但是有些画师的作品是有分illusts和manga的，大概就是普通作品(单、多、动)和漫画类型</span></span><br><span class="line">    <span class="comment"># 为了防止没拿到漫画类型作品的id,我使用dict(,**)来合并字典</span></span><br><span class="line">    <span class="comment"># 这样做是追加到前一个字典的尾部,所以我们必须排序才能正确请求到每一页的48个作品</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这里用的是冒泡排序（从小到大），刚好学到就用了</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len_total<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(len_total<span class="number">-1</span>-x):</span><br><span class="line">            <span class="keyword">if</span> total_data[y] &gt; total_data[y+<span class="number">1</span>]:</span><br><span class="line">                total_data[y],total_data[y+<span class="number">1</span>] = total_data[y+<span class="number">1</span>],total_data[y]</span><br><span class="line">    <span class="comment"># 从大到小排序的作品id</span></span><br><span class="line">    total_data = total_data[::<span class="number">-1</span>]</span><br><span class="line">    <span class="comment"># 按每48个分组,画师每页显示48个作品</span></span><br><span class="line">    limit_num = <span class="number">48</span></span><br><span class="line">    <span class="comment"># after_grouping_list = [[xxx,xxx,xxx],[48个id],[...]...]</span></span><br><span class="line">    after_grouping_list = [total_data[i:i+limit_num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(total_data),limit_num)]</span><br><span class="line">    print(<span class="string">'画师'</span>,name,<span class="string">'作品有：'</span>,len(after_grouping_list),<span class="string">'页'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 开始根据作品id来拼接url（就是那个一大串的url）</span></span><br><span class="line">    count = <span class="number">0</span>   <span class="comment"># 每拼接完48个+1</span></span><br><span class="line">    <span class="keyword">for</span> grouping_list <span class="keyword">in</span> after_grouping_list:</span><br><span class="line">        ids_big = <span class="string">'https://www.pixiv.net/ajax/user/&#123;&#125;/profile/illusts?'</span>.format(painter_id)</span><br><span class="line">        <span class="keyword">for</span> work_id <span class="keyword">in</span> grouping_list:</span><br><span class="line">            ids = <span class="string">'ids%5B%5D='</span> + work_id + <span class="string">'&amp;'</span></span><br><span class="line">            ids_big = ids_big + ids </span><br><span class="line">        works_url = ids_big + <span class="string">'is_manga_top=0'</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第%s页的works_url:%s'</span> % (count,works_url))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 发起请求获得第count页作品的详细信息</span></span><br><span class="line">        works_html = self.request(works_url)</span><br><span class="line">        works_json = json.loads(works_html.text)</span><br><span class="line">        works_data = works_json[<span class="string">"body"</span>][<span class="string">"works"</span>].values()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> works_data:</span><br><span class="line">            title = x[<span class="string">'title'</span>]</span><br><span class="line">            folder_id = x[<span class="string">'id'</span>]</span><br><span class="line">            tags = x[<span class="string">'tags'</span>]</span><br><span class="line">            small_url = x[<span class="string">'url'</span>]</span><br><span class="line">            pageCount = x[<span class="string">'pageCount'</span>]</span><br><span class="line">            print(<span class="string">'\n作品id:&#123;0&#125;\t作品页数:&#123;1&#125;'</span>.format(folder_id,pageCount))</span><br><span class="line">            print(<span class="string">'作品标题:&#123;0&#125;'</span>.format(title))</span><br><span class="line">            print(<span class="string">'作品标签:&#123;0&#125;'</span>.format(tags))</span><br><span class="line">            print(<span class="string">'作品250*250图片地址:&#123;0&#125;'</span>.format(small_url))</span><br></pre></td></tr></table></figure><blockquote><p>works_data = works_json[“body”][“works”].values() </p><p>因为 keys() 是作品 id，values() 里面也有，所以直接 values() 就好了</p></blockquote><img src="/blog/2019/03/30/pixiv-two/11.png"><h2 id="7、最后"><a href="#7、最后" class="headerlink" title="7、最后"></a>7、最后</h2><blockquote><p>本篇主要是分析数据接口，拿到关注画师的所有作品的详细信息</p><p>那么下篇再根据单图动图多图进行图片下载，预计文件存储、其他的小功能和最后的代码汇总得放在下下篇了。</p><p>へ(￣ ￣;へ) </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> lxml </tag>
            
            <tag> requests </tag>
            
            <tag> pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫-pixiv关注画师作品[1]</title>
      <link href="/blog/2019/03/27/pixiv-one/"/>
      <url>/blog/2019/03/27/pixiv-one/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：大概有几篇是关于pixiv关注画师的作品抓取的思路和代码，后面大概还会有p站个人收藏的爬虫（这个比较简单）</p></blockquote><a id="more"></a><img src="/blog/2019/03/27/pixiv-one/HeadPicture.jpg"><h2 id="1、pixiv介绍"><a href="#1、pixiv介绍" class="headerlink" title="1、pixiv介绍"></a>1、pixiv介绍</h2><blockquote><ul><li><a href="https://www.pixiv.net/" target="_blank" rel="noopener">Pixiv</a></li><li>这是一个墙外的网站，需要正确的扶梯姿势和科学上网</li><li>当然也可以参考我的方法（nginx + 修改 hosts 文件）</li><li>地址：<a href="https://www.lanzous.com/b649306/" target="_blank" rel="noopener">点击前往</a>  密码:3235 (建议 hosts 文件取自己需要的那部分)</li><li>为什么选 pixiv 呢？其实在12月份的时候我刚开始学 python，这个 pixiv 的小项目是我自己突发奇想要做的，那时候是新年前一周左右，对于那时候的我来说，pixiv 反爬难度一般般，但比较难的数据接口分析、构造url、文件操作、代理、图片合成等（自己一个人盯了这个网站几天，最后完成超级兴奋！）</li></ul></blockquote><hr><h3 id="nginx-host上P站教程——2019-5-24更新"><a href="#nginx-host上P站教程——2019-5-24更新" class="headerlink" title="nginx+host上P站教程——2019.5.24更新"></a><code>nginx</code>+<code>host</code>上P站教程——2019.5.24更新</h3><ol><li>下载上面链接中的压缩包，解压</li></ol><img src="/blog/2019/03/27/pixiv-one/3.png"><ol start="2"><li><p>复制<code>hosts</code>文件中的代码，追加到当前电脑的<code>hosts</code>文件中</p><blockquote><p> 当前电脑的<code>hosts</code>文件在<code>C:\Windows\System32\drivers\etc</code>目录下，如果没找到的话可以搜索一下或者用<code>everything</code>软件（强烈建议!)进行搜索.</p></blockquote></li></ol><ol start="3"><li>打开<code>调试工具（这个功能全）.bat</code></li></ol><img src="/blog/2019/03/27/pixiv-one/4.png"><blockquote><p>选择对应的数字序号</p></blockquote><ol start="4"><li>Tip</li></ol><blockquote><ol><li>如果正常启动不行的话，可以尝试以下代码</li></ol></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon | findstr <span class="string">":443"</span></span><br><span class="line"><span class="meta"># 找到占用了443端口的程序的PID</span></span><br><span class="line"><span class="meta"># 可能是本机虚拟机占用了这个端口</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>或者手动修改nginx的端口，具体修改流程百度</li></ol></blockquote><h2 id="2、Target"><a href="#2、Target" class="headerlink" title="2、Target"></a>2、Target</h2><blockquote><ul><li>登录账号关注的画师的作品</li><li>思路：<ul><li>首先是模拟登录（PC 用过 pixiv 的同学都知道在未登录的时候 pixiv 会对用户做一些限制，所以我们要先模拟登录）</li><li>其次保持会话连接（可以考虑 cookie 保存，这里采用的是 requests 的 session 会话连接）</li><li>（基于图片网站，可能是动态加载，那么需要分析接口或者是 selenium 模拟）</li><li>最后才进行网页内容分析，然后抓取保存下来</li></ul></li></ul></blockquote><hr><h2 id="3、登录模拟实现流程"><a href="#3、登录模拟实现流程" class="headerlink" title="3、登录模拟实现流程"></a>3、登录模拟实现流程</h2><blockquote><h3 id="一、查找登录接口"><a href="#一、查找登录接口" class="headerlink" title="一、查找登录接口"></a>一、查找登录接口</h3></blockquote><ul><li>第一次找关于登录接口的时候，一个login都没看到，只看到一个 <a href="http://www.pixiv.net" target="_blank" rel="noopener">www.pixiv.net</a>     ,可惜是get请求的页面。</li><li>在拜读了 <a href="https://blog.csdn.net/df0128/article/details/80953212" target="_blank" rel="noopener">Chrome使用技巧</a> 、<a href="https://blog.csdn.net/Letasian/article/details/78461438" target="_blank" rel="noopener">Chrome开发者工具使用小技巧</a> 后，算是对 chrome 的调试工具有个大概了解的印象，知道了 preserve log 勾选后，可以保留网络日志，于是发现了真正的登录请求</li></ul><img src="/blog/2019/03/27/pixiv-one/1.png"><blockquote><h3 id="分析参数"><a href="#分析参数" class="headerlink" title="分析参数"></a>分析参数</h3></blockquote><p>password：个人密码</p><p>pixiv_id：个人id</p><p>post_key：不明字符串</p><p>source：pc即电脑端（截图没截全，把return_to漏掉了。。。）</p><p>return_to：是登录成功后跳转的页面，这个可以自己填，貌似默认是 <a href="https://www.pixiv.net/" target="_blank" rel="noopener">https://www.pixiv.net/</a></p><blockquote><h3 id="那么接下来就是找post-key了"><a href="#那么接下来就是找post-key了" class="headerlink" title="那么接下来就是找post_key了"></a>那么接下来就是找post_key了</h3></blockquote><ul><li>首先pixiv非常友好，所以应该不是js加密，而是在页面中随机生成的。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其次在点击登录的时候就跳转 url1 ↓</span></span><br><span class="line"><span class="comment"># url1 = https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index</span></span><br><span class="line"><span class="comment"># 但是登录请求的 url 是 url2 ↓</span></span><br><span class="line"><span class="comment"># url2 = https://accounts.pixiv.net/api/login?lang=zh</span></span><br><span class="line"><span class="comment"># 所以猜想 post_key 应该是在前者中生成的。</span></span><br></pre></td></tr></table></figure><blockquote><p>F12 打开，在 Elements 中 Ctrl + F 查看 post_key</p></blockquote><img src="/blog/2019/03/27/pixiv-one/2.png"><blockquote><p> 接下来用 BeautifulSoup 匹配</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.post_key = post_key_soup.find(<span class="string">'input'</span>) [<span class="string">'value'</span>]</span><br><span class="line"><span class="comment"># 因为是第一个input标签，而find返回的是第一个符合要求的结果</span></span><br></pre></td></tr></table></figure><blockquote><p>接着向 url2 发去 post 请求</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'pixiv_id'</span>: self.pixiv_id,</span><br><span class="line">    <span class="string">'password'</span>: self.password,</span><br><span class="line">    <span class="string">'return_to'</span>: self.return_to,</span><br><span class="line">    <span class="string">'post_key'</span>: self.post_key&#125;</span><br><span class="line">rep = se.post(self.login_url, data=data, headers=self.headers,verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># login_url是上面的 url2</span></span><br><span class="line"><span class="comment"># 我这里 return_to 写的是个人关注画师的那个页面的 url</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="登录代码"><a href="#登录代码" class="headerlink" title="登录代码"></a>登录代码</h3><p>0702更新代码，</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">se = requests.session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    base_url = <span class="string">'https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index'</span></span><br><span class="line">    login_url = <span class="string">'https://accounts.pixiv.net/api/login?lang=zh'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'referer'</span>: <span class="string">'https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index'</span>,</span><br><span class="line">        <span class="string">'origin'</span>: <span class="string">'https://accounts.pixiv.net'</span>,</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) '</span></span><br><span class="line">                          <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>&#125;</span><br><span class="line">    </span><br><span class="line">    post_key_html = se.get(base_url)</span><br><span class="line">    post_key_soup = BeautifulSoup(post_key_html.text, <span class="string">'lxml'</span>)</span><br><span class="line">    post_key = post_key_soup.find(<span class="string">'input'</span>)[<span class="string">'value'</span>]</span><br><span class="line">    print(post_key)    <span class="comment">#捕获postkey</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'pixiv_id'</span>: <span class="string">'xxxx'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'xxxx'</span>,</span><br><span class="line">        <span class="string">'return_to'</span>: <span class="string">'https://www.pixiv.net/bookmark.php?type=user&amp;rest=show&amp;p='</span>,</span><br><span class="line">        <span class="string">'post_key'</span>: post_key</span><br><span class="line">    &#125;</span><br><span class="line">    rep = se.post(login_url, data=data, headers=headers,verify=<span class="keyword">False</span>)</span><br><span class="line">    print(rep.text)</span><br></pre></td></tr></table></figure><blockquote><h3 id="顺便吐槽下-HTTPS-的证书报警问题"><a href="#顺便吐槽下-HTTPS-的证书报警问题" class="headerlink" title="顺便吐槽下 HTTPS 的证书报警问题"></a>顺便吐槽下 HTTPS 的证书报警问题</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning     <span class="comment">#强制取消警告</span></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br></pre></td></tr></table></figure><h2 id="4、最后"><a href="#4、最后" class="headerlink" title="4、最后"></a>4、最后</h2><blockquote><p>先到这吧，后面继续写解析关注画师页面（页数），寻找数据接口，单图动图多图下载估计写不到了</p><p>へ(￣ ￣;へ) </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> lxml </tag>
            
            <tag> requests </tag>
            
            <tag> pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next主题集成 algolia 站内搜索插件</title>
      <link href="/blog/2019/03/26/algolia/"/>
      <url>/blog/2019/03/26/algolia/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：Next主题集成algolia</p></blockquote><a id="more"></a><img src="/blog/2019/03/26/algolia/HeadPicture.jpg"><h3 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h3><ul><li>今天添加并完善了下blog的站内搜索（既然next有集成，为何不用呢？）</li><li>主要是参考了几篇超级详细的文章</li><li>大赞：<a href="http://www.qingpingshan.com/m/view.php?aid=386198" target="_blank" rel="noopener">Hexo+Next集成Algolia搜索</a>、<a href="https://www.zhihu.com/question/46822587" target="_blank" rel="noopener">知乎</a>、<a href="https://www.npmjs.com/package/hexo-algolia" target="_blank" rel="noopener">hexo-algolia</a></li></ul><h3 id="二、如何更新？"><a href="#二、如何更新？" class="headerlink" title="二、如何更新？"></a>二、如何更新？</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 删除 public 文件夹</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta"># 搜集站点的内容并通过 API 发送给 Algolia</span></span><br><span class="line">hexo algolia</span><br><span class="line"><span class="meta"># 如遇到 ERROR [Algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.</span></span><br><span class="line"><span class="meta"># export HEXO_ALGOLIA_INDEXING_KEY=[你的API Key]</span></span><br></pre></td></tr></table></figure><h3 id="三、问题枪毙名单"><a href="#三、问题枪毙名单" class="headerlink" title="三、问题枪毙名单"></a>三、问题枪毙名单</h3><h4 id="1-Not-enough-rights-to-update-an-object-near"><a href="#1-Not-enough-rights-to-update-an-object-near" class="headerlink" title="1. Not enough rights to update an object near"></a>1. Not enough rights to update an object near</h4><ul><li>解决方法：修改Algolia的ACL访问控制列表</li><li><img src="/blog/2019/03/26/algolia/1.png"></li><li><img src="/blog/2019/03/26/algolia/2.png"></li><li>将ACL修改为以上所示，文章里的ACL和现在的界面不一样，不知道是我用得少的原因(雾)，找了几分钟左右。</li></ul><h4 id="2-Please-provide-an-Algolia-index-name-in-your-hexo-config-yml-flle"><a href="#2-Please-provide-an-Algolia-index-name-in-your-hexo-config-yml-flle" class="headerlink" title="2. Please provide an Algolia index name in your hexo _config.yml flle"></a>2. Please provide an Algolia index name in your hexo _config.yml flle</h4><ul><li>解决方法：修改index名称</li><li>index名称就是在以下这个界面输入的那个index name</li><li><img src="/blog/2019/03/26/algolia/3.png"></li></ul><h4 id="3-ERROR-Algolia-Please-set-an-HEXO-ALGOLIA-INDEXING-KEY-environment-variable-to-enable-content-indexing"><a href="#3-ERROR-Algolia-Please-set-an-HEXO-ALGOLIA-INDEXING-KEY-environment-variable-to-enable-content-indexing" class="headerlink" title="3. ERROR [Algolia] Please set an HEXO_ALGOLIA_INDEXING_KEY environment variable to enable content indexing."></a>3. ERROR [Algolia] Please set an <code>HEXO_ALGOLIA_INDEXING_KEY</code> environment variable to enable content indexing.</h4><ul><li>这个通常是在hexo algolia的时候出现的问题</li><li>其实在上面的文章也有说到，这里简单说一下</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> HEXO_ALGOLIA_INDEXING_KEY=[你的API Key]</span><br></pre></td></tr></table></figure><ul><li>API Key 是 Search-Only API key</li></ul><h4 id="4-ERROR-gt-gt-You-might-have-used-an-Admin-Key-or-an-invalid-Key"><a href="#4-ERROR-gt-gt-You-might-have-used-an-Admin-Key-or-an-invalid-Key" class="headerlink" title="4.ERROR &gt;&gt; You might have used an Admin Key or an invalid Key."></a>4.ERROR &gt;&gt; You might have used an Admin Key or an invalid Key.</h4><p>第三点中用的是export命令，有时候会出现这个问题，解决方法：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> HEXO_ALGOLIA_INDEXING_KEY=[你的API <span class="comment">Key]</span></span><br></pre></td></tr></table></figure><p>使用<code>set</code>命令设置即可。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> algolia </tag>
            
            <tag> 博客搜索功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫之Xpath</title>
      <link href="/blog/2019/03/13/xpath/"/>
      <url>/blog/2019/03/13/xpath/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：Xpath语法，lxml解析html</p></blockquote><a id="more"></a><img src="/blog/2019/03/13/xpath/HeadPicture.png"><h3 id="一、什么是Xpath"><a href="#一、什么是Xpath" class="headerlink" title="一、什么是Xpath?"></a>一、什么是Xpath?</h3><ol><li>XPath 是 XML 路径语言，主要是在 XML 和 HTML 文档中查找我们想要的信息的语言。</li><li>XML 和 HTML 一样也是标记语言，但是 XML 用来传输和存储数据，而 HTML 用来显示数据</li></ol><h3 id="二、Xpath工具"><a href="#二、Xpath工具" class="headerlink" title="二、Xpath工具"></a>二、Xpath工具</h3><ol><li>Google：Xpath Helper</li></ol><p>（Google 插件可到下载<a href="https://www.crx4chrome.com/" target="_blank" rel="noopener">Crx4Chrom</a>(英文)、<a href="http://www.cnplugins.com/" target="_blank" rel="noopener">插件网</a>、<a href="http://chromecj.com/" target="_blank" rel="noopener">Chrome插件网 </a>下载）</p><ol><li>Firefox：Try Xpath</li><li>每个浏览器一般在应用中心或拓展里都可以下载</li></ol><blockquote><p>Xpath Helper 界面</p></blockquote><img src="/blog/2019/03/13/xpath/1.png"><h3 id="三、Xpath语法"><a href="#三、Xpath语法" class="headerlink" title="三、Xpath语法"></a>三、Xpath语法</h3><h4 id="1、路径表达式语法、相对-绝对路径"><a href="#1、路径表达式语法、相对-绝对路径" class="headerlink" title="1、路径表达式语法、相对/绝对路径"></a>1、路径表达式语法、相对/绝对路径</h4><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">路径表达式及描述</th></tr></thead><tbody><tr><td style="text-align:center">节点名称</td><td style="text-align:center">bookstore，选取 bookstore 下的所有子节点(标签)</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">/bookstore，从根节点下选取所有 bookstore 节点(子元素)</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">//bookstore，从全局节点中选择 bookstore 节点</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">//div[@price=‘a’]，选择所有 price 属性为 a 的 div</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">./input，选择当前节点下的 input</td></tr></tbody></table><h4 id="2、谓语"><a href="#2、谓语" class="headerlink" title="2、谓语"></a>2、谓语</h4><p>html 节点中第一个节点为 1，第二个为 2（需要区分）</p><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">//ul/li[1]</td><td style="text-align:center">选择 ul 下的第一个 li</td></tr><tr><td style="text-align:center">//ul/li[last()-0]</td><td style="text-align:center">选择 ul 下的最后一个 li</td></tr><tr><td style="text-align:center">//ul/li[last()-1]</td><td style="text-align:center">选择 ul 下的倒数第二个 li</td></tr><tr><td style="text-align:center">//ul/li[position()&lt;4]</td><td style="text-align:center">选择 ul 下前面的 3 个子元素</td></tr><tr><td style="text-align:center">//ul/li[position()&gt;1]</td><td style="text-align:center">选择第二个到最后的所有子元素</td></tr><tr><td style="text-align:center">//li[position()&gt;1] [position()&lt;11]</td><td style="text-align:center">在(2,+∞)中选择前十个</td></tr><tr><td style="text-align:center">text()</td><td style="text-align:center">获取函数文本</td></tr><tr><td style="text-align:center">@class</td><td style="text-align:center">获取标签的class</td></tr></tbody></table><img src="/blog/2019/03/13/xpath/2.png"><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><table><thead><tr><th style="text-align:center">*</th><th style="text-align:center">/bookstore/*，通配符，匹配 bookstore 下的所有子元素</th></tr></thead><tbody><tr><td style="text-align:center">@*</td><td style="text-align:center">//div[@*]，选择所有带有属性的 div</td></tr></tbody></table><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>“|“    —&gt;    //title | //ul[@class=‘item_con_list’]，选择 title 和对应的 ul</li></ul><h3 id="四、使用lxml-amp-xpath解析html"><a href="#四、使用lxml-amp-xpath解析html" class="headerlink" title="四、使用lxml&amp;xpath解析html"></a>四、使用lxml&amp;xpath解析html</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">html1 = etree.parse(index.html)<span class="comment"># 可以通过读取html文件的方式</span></span><br><span class="line">html2 = etree.HTML(text)<span class="comment"># 也可以将字符串解析为HTML文档</span></span><br><span class="line"></span><br><span class="line">result1 = etree.tostring(html2)<span class="comment"># 将字符串序列化成HTML文档,会自动补全</span></span><br><span class="line"></span><br><span class="line">result2 = html2.xpath(<span class="string">'表达式'</span>)  <span class="comment"># 使用xpath语法</span></span><br></pre></td></tr></table></figure><h3 id="五、Example"><a href="#五、Example" class="headerlink" title="五、Example"></a>五、Example</h3><ul><li>以<a href="https://hr.tencent.com/position.php?lid=2218&amp;start=0#a" target="_blank" rel="noopener">腾讯招聘网</a>为例</li><li>我们要获取到职位名称、职位类别、人数、地点和发布时间等内容</li><li><strong>2019.08.23</strong> 网站已变化</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>table<span class="regexp">//</span>tr</span><br></pre></td></tr></table></figure><p>选择到了13个子元素，分别是表头，翻页和底部其他招聘</p><img src="/blog/2019/03/13/xpath/3.png"><img src="/blog/2019/03/13/xpath/4.png">    <ul><li>那么可以往上找父元素，扩大范围</li></ul><img src="/blog/2019/03/13/xpath/5.png">    <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//table[@class=<span class="string">'tablelist'</span>]//<span class="keyword">tr</span>[@class=<span class="string">'even'</span>] | <span class="regexp">//table</span>[@class=<span class="string">'tablelist'</span>]//<span class="keyword">tr</span>[@class=<span class="string">'odd'</span>]</span><br></pre></td></tr></table></figure><ul><li>使用以上表达式，避开表头和翻页</li><li>上述表达式虽然精确但是有点冗长，鉴于网站规律性，可以采用以下表达式</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//table[<span class="string">@class='tablelist'</span>]//tr[<span class="string">position()&gt;1</span>][<span class="symbol">position()&lt;11</span>]</span><br></pre></td></tr></table></figure><ul><li>上面的表达式写在程序里不加text()来取的话，会返回类似 <element tr="" at="" 0x1df36b5bc08=""> 的结果。</element></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://hr.tencent.com/position.php?lid=2218&amp;start=0#a'</span></span><br><span class="line">html = requests.get(url=url,headers=headers)<span class="comment"># html.text未经过编码的字符串，unicode字符串</span></span><br><span class="line">etree_obj = etree.HTML(html.text)<span class="comment"># HTML解析的是字符串，所以html.text</span></span><br><span class="line">result1 = etree_obj.xpath(<span class="string">"//table[@class='tablelist']//tr[position()&gt;1][position()&lt;11]//text()"</span>)</span><br><span class="line">result2 = etree_obj.xpath(<span class="string">"//table[@class='tablelist']//tr[position()&gt;1][position()&lt;11]"</span>)</span><br><span class="line">print(result1)</span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure><img src="/blog/2019/03/13/xpath/6.png"><ul><li><p>结果可以看到有许多的转义字符，比如：\r、\t</p></li><li><p>最后将代码处理一下，照此方法可以获取到腾讯招聘的所有职位信息(后面有个坑，比如职位类别是空数据的话，XPath匹配到会自动放弃)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://hr.tencent.com/position.php?lid=2218&amp;start=0#a'</span></span><br><span class="line">html = requests.get(url=url,headers=headers)<span class="comment"># html.text未经过编码的字符串，unicode字符串</span></span><br><span class="line">etree_obj = etree.HTML(html.text)<span class="comment"># HTML解析的是字符串，所以html.text</span></span><br><span class="line">result = etree_obj.xpath(<span class="string">"//table[@class='tablelist']//tr[position()&gt;1][position()&lt;11]//text()"</span>)</span><br><span class="line">print(result)</span><br><span class="line">result2 = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">if</span> x.strip() != <span class="string">''</span>]</span><br><span class="line">print(result2)</span><br><span class="line">result3 = [print(result2[x],result2[x+<span class="number">1</span>],result2[x+<span class="number">2</span>],result2[x+<span class="number">3</span>],result2[x+<span class="number">4</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,len(result2),<span class="number">5</span>)]</span><br><span class="line">print(result3)</span><br></pre></td></tr></table></figure><ul><li>结果图</li></ul><img src="/blog/2019/03/13/xpath/7.png"><ul><li><h4 id="本篇代码Github地址：https-github-com-Coder-Sakura-exp-tree-master-xpath"><a href="#本篇代码Github地址：https-github-com-Coder-Sakura-exp-tree-master-xpath" class="headerlink" title="本篇代码Github地址：https://github.com/Coder-Sakura/exp/tree/master/xpath"></a>本篇代码Github地址：<a href="https://github.com/Coder-Sakura/exp/tree/master/xpath" target="_blank" rel="noopener">https://github.com/Coder-Sakura/exp/tree/master/xpath</a></h4></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门</title>
      <link href="/blog/2019/03/03/git-note/"/>
      <url>/blog/2019/03/03/git-note/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：主要记录git的命令和一些git的知识</p></blockquote><a id="more"></a><img src="/blog/2019/03/03/git-note/HeadPicture.png"><h3 id="一、github介绍"><a href="#一、github介绍" class="headerlink" title="一、github介绍"></a>一、github介绍</h3><p><a href="https://github.com/" target="_blank" rel="noopener">github</a>(<del>基佬站</del>)是一个开源代码托管平台(其中当然也有私有项目)，也作为一个版本控制系统，让你对代码的版本控制更加简单，不用去担心代码写错了怎么办？有没有备份？专心自己的项目就好。</p><p>本文没有关于桌面版的git安装、环境变量配置的教程(安装配置的话百度有很多教程)</p><img src="/blog/2019/03/03/git-note/1.jpg"><h3 id="二、github功能"><a href="#二、github功能" class="headerlink" title="二、github功能"></a>二、github功能</h3><ol><li>可以在上面找到许多开源项目、脚本甚至可以在上面找到一些课程</li><li>托管项目。只要连上互联网就可以同步到自己的项目代码或多人跟进项目</li><li>利用github和一些开源的博客系统可以搭建个人博客(本博客是hexo+github搭建的)</li></ol><h3 id="三、git命令"><a href="#三、git命令" class="headerlink" title="三、git命令"></a>三、git命令</h3><ol><li><font color="#FF3030">设置用户名和邮箱</font>，不设置会报“please tell me who you are.”，–global参数表示全局</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"email@example.com"</span></span><br><span class="line">git<span class="built_in"> config </span>--list # 检查设置</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化本地文件夹为git仓库（会生成.git隐藏文件，主要是用于版本控制）</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure><ol start="3"><li>本地版本管理</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git add ./[name]<span class="comment"># 跟踪文件进入暂存区，.表示当前目录所有文件，也可以指定文件</span></span><br><span class="line">git status<span class="comment"># 命令用于显示工作目录和暂存区的状态</span></span><br><span class="line">git <span class="keyword">commit</span> -m <span class="string">'提交说明'</span> <span class="comment"># 将暂存区里的改动给提交到本地的版本库</span></span><br><span class="line">git <span class="keyword">log</span> <span class="comment">--pretty=oneline# 查看最近到最远的提交日志，oneline表示每条输出一行</span></span><br><span class="line"><span class="comment">#  $ git log --pretty=oneline</span></span><br><span class="line"><span class="comment">#  f3e98b7f4495c78bf98f2661fad2ae745cd60b63 (HEAD -&gt; master, origin/master) proxy</span></span><br><span class="line"><span class="comment">#  f3e9....这串就是这次提交的版本号</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard [版本号] # 回退/前进到某个指定版本，版本号可以在git log中找到</span></span><br><span class="line"><span class="comment">#  也有快捷的回退命令</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^# 回退到上个版本</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^^# 回退到上上个版本</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD~100# 回退到上100个版本</span></span><br></pre></td></tr></table></figure><ol start="3"><li>将本地文件提交到github</li></ol><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add ./(name)</span><br><span class="line">git commit -m <span class="string">'message'</span></span><br><span class="line">git remote add origin [github仓库地址]</span><br><span class="line"><span class="meta"># 如果出现错误：fatal: remote origin already exists</span></span><br><span class="line"><span class="meta"># 执行 git remote rm origin#删除分支</span></span><br><span class="line"><span class="meta"># 再执行 git remote add origin [github仓库地址]#再添加</span></span><br><span class="line">git push origin master# 推送到github仓库</span><br><span class="line"><span class="meta"># 如果出现failed to push som refs to…….</span></span><br><span class="line"><span class="meta"># 需要将github仓库的文件同步下来先</span></span><br><span class="line"><span class="meta"># git pull origin master# pull拉文件下来</span></span><br><span class="line"><span class="meta"># 再执行 git push origin master# push推文件上去</span></span><br></pre></td></tr></table></figure><h3 id="四、2019-03-30"><a href="#四、2019-03-30" class="headerlink" title="四、2019/03/30"></a>四、2019/03/30</h3><p>删除远程仓库的文件，并上传新的文件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件夹</span></span><br><span class="line">git init</span><br><span class="line">git remote <span class="keyword">add </span><span class="keyword">origin </span>[仓库地址]</span><br><span class="line"><span class="comment"># git remote rm origin</span></span><br><span class="line">git pull <span class="keyword">origin </span>master</span><br><span class="line"><span class="comment"># 然后在本地删除文件</span></span><br><span class="line">git <span class="keyword">add </span>*</span><br><span class="line">git commit -m <span class="string">"del all"</span></span><br><span class="line">git push <span class="keyword">origin </span>master</span><br><span class="line"><span class="comment"># 放入新的文件</span></span><br><span class="line">git <span class="keyword">add </span>*</span><br><span class="line">git commit -m <span class="string">"create new file"</span></span><br><span class="line">git push <span class="keyword">origin </span>master</span><br></pre></td></tr></table></figure><h3 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> remote -v</span><br><span class="line"><span class="comment"># 查看远程仓库地址</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫之代理</title>
      <link href="/blog/2019/02/28/proxy/"/>
      <url>/blog/2019/02/28/proxy/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：代理原理作用，requests设置代理方法以及爬取免费代理的脚本实例</p></blockquote><a id="more"></a><img src="/blog/2019/02/28/proxy/HeadPicture.jpg"><h3 id="一、代理原理"><a href="#一、代理原理" class="headerlink" title="一、代理原理"></a>一、代理原理</h3><img src="/blog/2019/02/28/proxy/proxy_1.png"><p>根据自己理解解读：</p><ol><li>客户端设置了代理信息后，客户端向对应的代理站点发出请求（向xxx网站发起请求）</li><li>代理站点收到请求之后，就会执行对应的响应动作（执行动作）</li><li>代理站点获得xxx网站的响应（得到站点响应）</li><li>代理站点根据客户端要求返回对应信息（客户端要求返回Source code，则返回Source code）</li></ol><h3 id="二、代理作用"><a href="#二、代理作用" class="headerlink" title="二、代理作用"></a>二、代理作用</h3><ol><li>突破自身ip访问限制，比如访问国外站点</li><li>爬取对ip访问频率有一定限制的站点</li><li>提高访问速度</li><li>隐藏真实ip</li></ol><h3 id="三、代理网站"><a href="#三、代理网站" class="headerlink" title="三、代理网站"></a>三、代理网站</h3><p><strong>免费代理ip列表</strong>：</p><table><thead><tr><th>含国外ip</th><th><a href="https://ip.seofangfa.com/" target="_blank" rel="noopener">方法SEO顾问</a>，<a href="http://www.89ip.cn/" target="_blank" rel="noopener">89代理</a>，<a href="https://ip.ihuan.me/" target="_blank" rel="noopener">小幻http代理</a>，<a href="http://www.ip3366.net/" target="_blank" rel="noopener">云代理</a></th></tr></thead><tbody><tr><td>不含</td><td><a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺</a>，<a href="https://www.kuaidaili.com/" target="_blank" rel="noopener">快代理</a></td></tr></tbody></table><p><strong>付费代理尚未了解，此处留空</strong></p><h3 id="四、requests设置代理方法"><a href="#四、requests设置代理方法" class="headerlink" title="四、requests设置代理方法"></a>四、requests设置代理方法</h3><p>requests中有预设好的参数接收代理信息 proxies，这个参数接收的是一个字典对象</p><p>因为不知道访问的网站使用的是http协议还是https协议，所以proxies最好2种都有设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>:<span class="number">92.255</span><span class="number">.255</span><span class="number">.78</span>:<span class="number">54628</span>,</span><br><span class="line">    <span class="string">'https'</span>:<span class="number">92.255</span><span class="number">.255</span><span class="number">.78</span>:<span class="number">54628</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(url=url1,headers=headers,proxies=proxies)</span><br></pre></td></tr></table></figure><h3 id="五、脚本示例"><a href="#五、脚本示例" class="headerlink" title="五、脚本示例"></a>五、脚本示例</h3><p>github地址：<a href="https://github.com/Coder-Sakura/exp/tree/master/seo_ip" target="_blank" rel="noopener">https://github.com/Coder-Sakura/exp/tree/master/seo_ip</a></p><p>本来我是打算用89代理的api接口，但是测试之后发现可靠性有点低，并且外网ip比较少，所以转用<a href="https://ip.seofangfa.com/" target="_blank" rel="noopener">SEO</a></p><p>（本次抓取代理ip主要是用在我自己做 <a href="http://www.pixiv.net" target="_blank" rel="noopener">pixiv</a> 的小项目上，爬取关注画师的所有作品和自己的收藏作品，后续会整理出来，初学爬虫，有错还请指正）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning     <span class="comment"># 用于强制取消警告</span></span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter                                   <span class="comment"># 用于强制取消警告</span></span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)      <span class="comment"># 强制取消警告</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seo_ip</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) '</span></span><br><span class="line">                          <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>&#125;</span><br><span class="line">        self.agent_ip_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Agent</span><span class="params">(self,ip_agent_url)</span>:</span></span><br><span class="line">        html = requests.get(url=ip_agent_url,headers=self.headers,verify=<span class="keyword">False</span>,timeout=<span class="number">5</span>)</span><br><span class="line">        html_soup = BeautifulSoup(html.text, <span class="string">'lxml'</span>)</span><br><span class="line">        <span class="comment"># 去除第一个和前25个，26-50为国外ip</span></span><br><span class="line">        ip_list = html_soup.find(<span class="string">'tbody'</span>).find_all(<span class="string">'tr'</span>)[<span class="number">26</span>:]    </span><br><span class="line">        items = []</span><br><span class="line">        print(<span class="string">'搜索完成,代理信息如下:'</span>) </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> ip_list:        </span><br><span class="line">            ip_port = list(item)[<span class="number">0</span>].get_text() + <span class="string">':'</span> +list(item)[<span class="number">1</span>].get_text()</span><br><span class="line">            <span class="comment"># list(ip_port)[0]为ip,[1]为端口,[2]响应时间,[3]位置,[4]最后验证时间</span></span><br><span class="line">            print(<span class="string">'ip: %s ,响应时间: %ss ,ip位置: %s'</span> % (ip_port,list(item)[<span class="number">2</span>].get_text(),list(item)[<span class="number">3</span>].get_text()))</span><br><span class="line">            items.append(ip_port)        <span class="comment">#存储爬取到的ip(需要添加)</span></span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(self,items)</span>:</span>       <span class="comment"># 检验ip活性     # https://ip.seofangfa.com/</span></span><br><span class="line">        print(<span class="string">'正在进行代理池ip活性检测......'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                proxy = &#123;</span><br><span class="line">                    <span class="string">'http'</span>:item,</span><br><span class="line">                    <span class="string">'https'</span>:item</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment"># 遍历时，利用百度，设定timeout，未响应则断开连接</span></span><br><span class="line">                judge_url = <span class="string">'https://www.baidu.com/'</span>     </span><br><span class="line">                response = requests.get(url=judge_url,headers=self.headers,proxies=proxy,verify=<span class="keyword">False</span>,timeout=<span class="number">5</span>)</span><br><span class="line">                self.agent_ip_list.append(item)</span><br><span class="line">                print(item,<span class="string">'可用...'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(item,<span class="string">'不可用...'</span>)</span><br><span class="line">        print(<span class="string">'代理池ip活性检测完毕...\n代理池总量:'</span>,len(self.agent_ip_list),<span class="string">'\n代理池:'</span>,self.agent_ip_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        ip_agent_url = <span class="string">'https://ip.seofangfa.com/'</span></span><br><span class="line">        items = self.Agent(ip_agent_url)</span><br><span class="line">        self.judge(items)</span><br><span class="line"></span><br><span class="line">seo_ip = seo_ip()</span><br><span class="line">seo_ip.work()</span><br></pre></td></tr></table></figure><p>没有导入这2个库的话，会因为ssl证书而出现警告，如图：</p><ol><li>from requests.packages.urllib3.exceptions import InsecureRequestWarning</li><li>from requests.adapters import HTTPAdapter</li></ol><img src="/blog/2019/02/28/proxy/proxy_2.png"><h3 id="六、附图"><a href="#六、附图" class="headerlink" title="六、附图"></a>六、附图</h3><blockquote><p> 最后附上运行图</p></blockquote><img src="/blog/2019/02/28/proxy/proxy_3.png">]]></content>
      
      
      <categories>
          
          <category> proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python第三方库安装[pip、whl]</title>
      <link href="/blog/2019/02/12/212/"/>
      <url>/blog/2019/02/12/212/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本篇概述：python第三方库安装</p></blockquote><a id="more"></a><img src="/blog/2019/02/12/212/HeadPicture.jpg"><h3 id="一、pip安装"><a href="#一、pip安装" class="headerlink" title="一、pip安装"></a>一、pip安装</h3><ul><li>pip3 install [库名] 或 pip install [库名]</li></ul><hr><blockquote><h4 id="2019-02-28更新"><a href="#2019-02-28更新" class="headerlink" title="[2019.02.28更新]"></a>[2019.02.28更新]</h4></blockquote><p>针对 ‘pip’ 不是内部命令，也不是可运行的程序的情况：</p><p>原因：环境变量 Path 未配置完成</p><ol><li>找到 python 的安装目录，将 <font color="#FF3030">python 的安装目录</font> 和 <font color="#FF3030">Python安装目录\Scripts</font> 添加到 环境变量 Path 中即可；</li><li>环境变量Path：计算机属性 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量</li></ol><img src="/blog/2019/02/12/212/3.png"><h3 id="二、whl安装"><a href="#二、whl安装" class="headerlink" title="二、whl安装"></a>二、whl安装</h3><div><div class="fold_hider"><div class="close hider_title"><u>点我可以将内容伸缩哦~</u></div></div><div class="fold"><p>٩(๑&gt;◡&lt;๑)۶</p><blockquote><ul><li>如果pip安装不行，可以考虑whl安装(轮子大法好！) </li><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">Python常用库whl文件下载</a></li><li>如何知道本机安装的python支持哪个版本的轮子?</li></ul></blockquote><h5 id="首先要知道系统是多少位的？-在cmd中输入"><a href="#首先要知道系统是多少位的？-在cmd中输入" class="headerlink" title="首先要知道系统是多少位的？(在cmd中输入)"></a>首先要知道系统是多少位的？(在cmd中输入)</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo <span class="string">| findstr "</span>系统类型<span class="string">"</span></span><br></pre></td></tr></table></figure><p>结果：x64-based PC  = (64位 AMD64)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pip._internal</span><br><span class="line">print(pip._internal.pep425tags.get_supported())</span><br></pre></td></tr></table></figure><p>X86-based PC  = (32位 WIN32)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pip</span><br><span class="line">print(pip.pep425tags.get_supported())</span><br></pre></td></tr></table></figure><h5 id="选择对应的轮子"><a href="#选择对应的轮子" class="headerlink" title="选择对应的轮子"></a>选择对应的轮子</h5><ol><li><p>输入上面的代码后，会返回一个list，list里面就是当前系统支持的whl版本</p></li><li><p>比如 ‘cp37’, ‘cp37m’, ‘win_amd64’，cp37对应的是python3.7版本; cp37m 对应的是依赖于python3.7应用程序二进制接口; win_amd64对应的是64位系统编译的。</p></li></ol><p><img src="/blog/2019/02/12/212/1.png"></p><ol start="3"><li>打开上面的网址，ctrl + F ，这里使用 mysqlclient 作为示范</li></ol><p><img src="/blog/2019/02/12/212/2.png"></p><ol start="4"><li><p>根据刚刚的结果，下载以下版本的轮子即可。</p><p><strong>mysqlclient‑1.4.2‑cp37‑cp37m‑win_amd64.whl</strong></p></li></ol><p>​    库名 - 版本号 - 对应python版本 - 依赖 - 系统位数</p><h5 id="安装轮子"><a href="#安装轮子" class="headerlink" title="安装轮子"></a>安装轮子</h5><ol start="5"><li>进入到轮子目录，cmd打开，pip install [名字].whl 即可</li></ol><hr><blockquote><h4 id="2019-02-28更新"><a href="#2019-02-28更新" class="headerlink" title="[2019.02.28更新]"></a>[2019.02.28更新]</h4></blockquote><p>针对 pip install [名字].whl 安装不成功的情况</p><ol><li>可以将whl文件的后缀名.whl更改为.zip，然后解压</li><li>在解压目录下进行 python setup.py install 运行安装[通常whl文件解压后都有setup.py]</li><li>对于没有 setup.py 的，直接将解压目录放入libs文件夹中</li><li>whl文件是已经编译好的文件，作用主要是为了方便我们进行 python 的第三方库安装和使用</li></ol></div></div><h3 id="三、Anaconda"><a href="#三、Anaconda" class="headerlink" title="三、Anaconda"></a>三、Anaconda</h3><p>​    Anaconda包括Conda、Python以及一大堆安装好的科学包和依赖项。(Conda是一个开源的包和环境的管理器)</p><p>​    从 <a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">Anaconda官网</a> 下载，图形化安装，十分简单，而且网上的教程也多。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2019/02/09/hello-world/"/>
      <url>/blog/2019/02/09/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.    </p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
